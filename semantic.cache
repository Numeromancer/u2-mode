;; Object u2-mode/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "u2-mode/"
  :tables (list 
   (semanticdb-table "u2-cache.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("nilstring" function (:arguments ("string")) nil [6690 6763]) ("non-nilstring" function (:arguments ("string")) nil [6764 6834]) ("unidata-user-hashtable" variable (:default-value (make-hash-table :test (quote equal))) nil [7208 7270]) ("unidata-passwd-hashtable" variable (:default-value (make-hash-table :test (quote equal))) nil [7271 7335]) ("unidata-account-path-hashtable" variable (:default-value (make-hash-table :test (quote equal))) nil [7336 7406]) ("unidata-hosts" variable nil nil [7407 7433]) ("unidata-prompt-for-host" function nil nil [7435 7807]) ("unidata-set-user" function (:user-visible-flag t :arguments ("host" "user")) nil [7809 7980]) ("unidata-get-user" function (:arguments ("host")) nil [7982 8301]) ("unidata-build-host-path" function (:arguments ("&optional" "host")) nil [8306 8578]) ("unidata-remote-path-p" function (:arguments ("path")) nil [8580 8673]) ("unidata-path-splitting-regexp" variable (:default-value "/\\(?:\\(?:\\([^:]+\\):\\)?\\)\\([^@]+\\)@\\([^:]+\\):\\(.*\\)") nil [8675 9167]) ("unidata-split-host-path" function (:arguments ("path")) nil [9169 9845]) ("unidata-break-account-path" function (:arguments ("path")) nil [9847 9929]) ("unidata-set-account-path" function (:user-visible-flag t :arguments ("host" "account-path")) nil [9931 10142]) ("unidata-get-account-path" function (:arguments ("&optional" "host")) nil [10144 10366]) ("unidata-prompt-for-account-path" function (:arguments ("&optional" "host")) nil [10368 11181]) ("unidata-set-passwd" function (:user-visible-flag t :arguments ("host" "user" "passwd")) nil [11340 11634]) ("unidata-get-host-with-passwd" function (:arguments ("user")) nil [11636 12294]) ("unidata-get-passwd" function (:arguments ("host" "user")) nil [12296 13550]) ("u2-cache" package nil nil [13553 13572]))
    :file "u2-cache.el"
    :pointmax 13572
    :unmatched-syntax 'nil
    )
   (semanticdb-table "unidata.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("comint" include nil nil [2502 2519]) ("telnet" include nil nil [2520 2537]) ("u2-cache" include nil nil [2538 2557]) ("cl" include nil nil [2558 2571]) ("unidata-rcs-version" variable (:constant-flag t :default-value "@(#)$Id$") nil [2573 2713]) ("unidata-mode-version" variable (:constant-flag t :default-value (if (string-match "\\<[0-9]+\\.[0-9]+\\>" unidata-rcs-version) (substring unidata-rcs-version (match-beginning 0) (match-end 0)) "0.0")) nil [2715 3180]) ("if" code nil nil [3527 3850]) ("defgroup" code nil nil [3854 4136]) ("unidata-local-shell" variable (:default-value "/bin/sh") nil [4137 4485]) ("unidata-shell-prompt-regexp" variable (:default-value "^.*[>#%$][ 	]*") nil [4486 4654]) ("unidata-prompt" variable (:default-value "^.*[:>][ 	]*$") nil [4655 4774]) ("unidata-environment-alist" variable (:default-value (quote (("PS1" . "shell>") ("UDTHOME" . "/opt/ud61") ("UDTBIN" . "${UDTHOME}/bin") ("TERM" . "dumb")))) nil [4775 5125]) ("unidata-setenv-format-string" variable (:default-value "export %s=\"%s\"") nil [5126 5474]) ("unidata-new-line" variable (:default-value "
") nil [5475 5579]) ("unidata-count" variable nil nil [5580 5664]) ("unidata-account-path" variable nil nil [5793 6006]) ("unidata-application-path" variable (:default-value "/opt/ud71") nil [6007 6217]) ("unidata-udt-command" variable (:default-value "${UDTBIN}/udt") nil [6218 6352]) ("unidata-initial-count" variable (:default-value -40) nil [6353 6491]) ("unidata-maximum-count" variable (:default-value 4) nil [6492 6613]) ("unidata-auto-upcase-commands" variable (:user-visible-flag t) nil [6614 6903]) ("unidata-command-word-regexp" variable (:default-value "\\b\\(?:[/._]\\|\\w\\)+\\b\\|\"[^\"]*\"") nil [6904 7140]) ("unidata-command-hooks" variable (:default-value (quote (("\\`LOGTO\\'" . unidata-logto-hook) ("\\`HELP\\'" . unidata-help-hook) ("\\`BYE\\'" . unidata-bye-hook) ("\\`LO\\'" . unidata-bye-hook) ("\\`EDIT\\'" . unidata-edit-command-hook)))) nil [7214 8420]) ("unidata-prevent-interaction-suffix" variable (:default-value "NO.PAGE HDR.SUPP COL.HDR.SUPP COUNT.SUP") nil [8466 8660]) ("unidata-help-command-format" variable (:user-visible-flag t :default-value "LIST HELP.FILE WITH @ID LIKE \"...*%s\" TEXT NO.PAGE HDR.SUPP") nil [8661 9076]) ("unidata-help-done-regexp" variable (:default-value "^\\([0-9]+\\|No\\)[ 	]*records? listed.?") nil [9077 9395]) ("telnet-login-prompt-regexp" variable (:default-value "ogin[ 	]*:[ 	]*\\'") nil [9479 9537]) ("unidata-process" variable nil nil [9540 9661]) ("unidata-host" variable nil nil [9663 9730]) ("host-info" variable nil nil [9732 9824]) ("unidata-buffer-list" variable nil nil [9826 10072]) ("get-unidata-process" function (:arguments ("file-name")) nil [10267 10779]) ("unidata-check-process" function (:arguments ("proc")) nil [10782 10820]) ("unidata-send-command" function (:arguments ("proc" "cmd" "&rest" "arg-list")) nil [10822 11051]) ("unidata-extract-source-table-regexp" variable (:constant-flag t :default-value ".*/\\([^/]+\\)/[^/]*\\'") nil [11053 11127]) ("unidata-process-initial-commands" function (:arguments ("p" "user" "host" "commands")) nil [11131 11412]) ("unidata-upcase-command-words" function (:arguments ("string")) nil [11414 11792]) ("unidata-set-mode-name" function nil nil [11844 11992]) ("unidata-logto-hook" function (:arguments ("cmd-list")) nil [11994 12226]) ("unidata-edit-command-hook" function (:arguments ("cmd-list")) nil [12228 12563]) ("unidata-redirect" function (:arguments ("cmd" "buf-name" "proc" "done-regexp")) nil [12565 13626]) ("unidata-help-hook" function (:arguments ("cmd-list")) nil [13630 14153]) ("unidata-bye-hook" function (:arguments ("cmd-list")) nil [14155 14348]) ("unidata-check-command-list" function (:arguments ("cl")) nil [14350 14444]) ("unidata-filter-command" function (:arguments ("string")) nil [14547 15207]) ("unidata-send" function (:arguments ("proc" "string")) nil [15209 15429]) ("unidata-insert-prompt" function nil nil [15433 15568]) ("unidata-send-output-to-buf" function (:arguments ("proc" "cmd" "buf-name")) nil [15570 16066]) ("unidata-filter" function (:arguments ("proc" "string")) nil [16071 17087]) ("unidata-setup-environment" function (:arguments ("proc")) nil [17089 17450]) ("unidata-get-to-ud" function (:arguments ("proc")) nil [17455 17919]) ("unidata-pre-ud-filter" function (:arguments ("proc" "string")) nil [17921 18226]) ("unidata-strip-extra-lines" function (:arguments ("string")) nil [18229 18402]) ("unidata-post-ud-filter" function (:arguments ("proc" "string")) nil [18405 18629]) ("unidata-remote-initial-filter" function (:arguments ("proc" "string")) nil [18631 19704]) ("unidata-get-last-output" function nil nil [19708 19985]) ("unidata-temp-record-dir" variable (:default-value "_HOLD_") nil [20160 20501]) ("unidata-make-edit-record-command" function (:arguments ("table-name" "record-id" "&optional" "dict")) nil [20686 21024]) ("unidata-make-save-record-command2" function (:arguments ("rec-info-path")) nil [21461 21866]) ("unidata-tmp-record-file-extension" variable (:default-value "u2r") nil [21869 21917]) ("unidata-tmp-file-cnt" variable nil nil [21918 21949]) ("unidata-make-tmpfile-name" function (:arguments ("table-name" "record-id" "&optional" "dict")) nil [22072 22672]) ("unidata-keep-temps-on-killing-buffer" variable nil nil [23504 23793]) ("unidata-edit-record" function (:user-visible-flag t :arguments ("table-name" "rec-id" "&optional" "dict" "u2-buffer")) nil [24096 26346]) ("unidata-save-record" function (:arguments ("&optional" "buffer")) nil [26350 27257]) ("unidata-mode-syntax-table" variable nil nil [27423 27500]) ("if" code nil nil [27501 27774]) ("unidata-mode-abbrev-table" variable nil nil [27777 27857]) ("define-abbrev-table" code nil nil [27859 27910]) ("unidata-mode-map" variable nil nil [27912 27974]) ("unidata-toggle-auto-upcase" function nil nil [27976 28102]) ("unidata-menu" variable (:default-value (make-sparse-keymap "Unidata")) nil [28104 28156]) ("if" code nil nil [28158 29239]) ("unidata-toggle-window-dedicated" function nil nil [29242 29398]) ("define-derived-mode" code nil nil [29400 29621]) ("unidata-setup-connection" function (:arguments ("full-path" "user" "host" "path" "process")) nil [29625 30152]) ("put" code nil nil [30154 30200]) ("put" code nil nil [30201 30239]) ("put" code nil nil [30240 30281]) ("put" code nil nil [30282 30320]) ("put" code nil nil [30321 30364]) ("unidata-open-remote-connection" function (:arguments ("path")) nil [30367 31656]) ("unidata-open-local-connection" function (:arguments ("path")) nil [31659 32485]) ("unidata" function (:user-visible-flag t :arguments ("&optional" "path")) nil [32572 33000]) ("unidata-view-account-in-dired" function (:arguments ("&optional" "host")) nil [33010 33240]) ("unidata" package nil nil [33243 33261]))
    :file "unidata.el"
    :pointmax 33486
    :unmatched-syntax 'nil
    )
   (semanticdb-table "u2-compile.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("unidata" include nil nil [1710 1728]) ("unibasic" include nil nil [1729 1748]) ("unibasic-basic-cmd-string" variable (:default-value "BASIC") nil [1750 2122]) ("unibasic-compile-options-alist" variable (:default-value (quote (("-D" "Generate X-Reference for debugger") ("-G" "Enable profiling") ("-LIST" "Generate a list of the program") ("-XREF" "Generate a cross reference table") ("-Z2" "Enable debugging") ("-I" "Keywords are case insensitive")))) nil [2125 2412]) ("unibasic-basic-arg-list" variable nil nil [2415 2772]) ("unibasic-default-source-table" variable (:default-value "BP") nil [2801 2952]) ("unibasic-catalog-command" variable (:default-value "CATALOG") nil [2953 3282]) ("unibasic-run-command" variable (:default-value "RUN") nil [3284 3597]) ("if" code nil nil [3653 3900]) ("if" code nil nil [3901 4163]) ("unibasic-emacs-version-or-newer" function (:arguments ("major" "minor")) nil [4165 4339]) ("when" code nil nil [4341 5524]) ("unibasic-basic-cmd-string" variable (:default-value "BASIC") nil [5565 5607]) ("unibasic-default-source-table" function (:arguments ("file")) nil [5609 5660]) ("unibasic-source-table" variable nil nil [5662 5696]) ("unibasic-get-source-table" function (:arguments ("file-name")) nil [5698 5946]) ("unibasic-compile-command" function (:arguments ("file")) nil [5948 6245]) ("unibasic-make-run-command" function (:arguments ("file")) nil [6248 6495]) ("unibasic-run-file" function (:arguments ("ud-proc" "file" "&optional" "options-string")) nil [6497 6709]) ("unibasic-compile-file" function (:arguments ("ud-proc" "file" "&optional" "catalog-p")) nil [6711 6846]) ("unibasic-catalog-method" variable (:default-value (quote local)) nil [6848 7260]) ("unibasic-catalog-file" function (:arguments ("ud-proc" "file")) nil [7262 7685]) ("unibasic-catalog" function nil nil [8312 8462]) ("unibasic-compile" function nil nil [8464 8615]) ("unibasic-run" function nil nil [8723 8866]) ("unibasic-compile-and-catalog" function nil nil [8869 9293]) ("host-is-this-host" function (:arguments ("host")) nil [9295 9333]) ("def-local-var" function (:arguments ("varname" "value" "&optional" "doc")) nil [9358 9508]) ("unibasic-compile" package nil nil [9511 9538]))
    :file "u2-compile.el"
    :pointmax 9648
    )
   (semanticdb-table "unibasic.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("cl" include nil nil [2824 2837]) ("unibasic-rcs-version" variable (:constant-flag t :default-value "@(#)$Id$") nil [2839 2982]) ("unibasic-mode-version" variable (:constant-flag t :default-value (if (string-match "\\<[0-9]+\\.[0-9]+\\>" unibasic-rcs-version) (substring unibasic-rcs-version (match-beginning 0) (match-end 0)) "0.0")) nil [2984 3454]) ("if" code nil nil [3801 4124]) ("unibasic-emacs-type" variable (:default-value (cond ((string-match "XEmacs" emacs-version) (quote xemacs)) ((string-match "Lucid" emacs-version) (quote lucid)) ((string-match "Epoch" emacs-version) (quote epoch)) (t (quote emacs)))) nil [4154 4366]) ("if" code nil nil [4422 4669]) ("if" code nil nil [4670 4932]) ("unibasic-emacs-version-or-newer" function (:arguments ("major" "minor")) nil [4933 5107]) ("cond" code nil nil [5109 9738]) ("unibasic-label-regexp" variable (:default-value "^[ 	]*\\(\\([0-9]+:?\\)\\|\\([a-zA-Z][a-zA-Z0-9_$\\.]*:\\)\\)") nil [9740 9895]) ("unibasic-comment-regexp" variable (:default-value "\\(^[ 	]*[!\\*]\\)\\|\\(;[ 	]*\\*.*\\)") nil [9897 10034]) ("unibasic-block-inter-regexp" variable (:default-value "[ 	]*\\<\\(UNTIL\\|WHILE\\).*\\(DO\\)?[ 	]*\\($\\|;[ 	]*\\*\\)") nil [10036 10142]) ("unibasic-block-start-regexp" variable (:default-value "\\<\\(THEN\\|ELSE\\|LOCKED\\|LOOP\\|\\(UNTIL\\|WHILE\\).*DO\\|ON ERROR\\|DO\\)[ 	]*\\($\\|;[ 	]*\\*\\)") nil [10144 10391]) ("unibasic-block-end-regexp" variable (:default-value ".*\\<\\(END\\|REPEAT\\|NEXT\\)\\([ 	;]\\|$\\)") nil [10521 10706]) ("unibasic-compiler-directive-regexp" variable (:default-value "^\\s-*\\$") nil [10708 10887]) ("unibasic-continuation-char" variable (:default-value 124) nil [10889 11109]) ("unibasic-separator-char" variable (:default-value 59) nil [11111 11198]) ("unibasic-labels-timer" variable nil nil [11200 11313]) ("unibasic-imenu-generic-expression" variable (:default-value (list (list "LABELS" unibasic-label-regexp 0))) nil [11315 11676]) ("unibasic-labels-alist" variable nil nil [11678 11759]) ("unibasic-mode-abbrev-table" variable nil nil [11761 11856]) ("define-abbrev-table" code nil nil [11857 11909]) ("unibasic-mode-syntax-table" variable nil nil [11911 12000]) ("if" code nil nil [12001 13892]) ("unibasic-mode-map" variable nil nil [13894 13967]) ("unibasic-menu-map" variable nil nil [13968 14059]) ("if" code nil nil [14060 17345]) ("unibasic-xemacs-menu" variable (:constant-flag t :default-value (quote ("Unibasic" ["Forward by Command" unibasic-next-command t] ["Backward by Command" unibasic-prev-command t] ["Forward by Label" unibasic-skip-to-next-label t] ["Backward by Label" unibasic-skip-to-prev-label t] ["Mark Label Block" unibasic-mark-label-block t] ["Indent Region" unibasic-indent-region t] ["Comment Region" comment-region t] ["Uncomment Region" unibasic-uncomment-region nil] "----" ["Append Comment" unibasic-append-comment t] ["Append Emacs Tag" unibasic-insert-emacs-tag t] "----" ["Send bug report" unibasic-submit-bug-report t]))) nil [17408 18156]) ("unibasic-mode" function (:user-visible-flag t) nil [18173 22120]) ("unibasic-get-bol" function (:arguments ("&optional" "arg")) nil [22364 22458]) ("unibasic-get-eol" function (:arguments ("&optional" "arg")) nil [22459 22547]) ("unibasic-within-string" function nil nil [22548 22659]) ("unibasic-within-comment" function nil nil [22660 22772]) ("unibasic-vboundp" function (:arguments ("symbol")) nil [22774 22945]) ("if" code nil nil [22993 23242]) ("unibasic-cancel-timer" function (:arguments ("arg")) nil [23244 23430]) ("unibasic-add-timer" function (:arguments ("timeout" "func")) nil [23440 23736]) ("unibasic-label-only-regexp" function nil nil [23738 23865]) ("unibasic-continued-line" function (:arguments ("&optional" "line")) nil [23867 24163]) ("unibasic-syntactic-line" function (:arguments ("line")) nil [24165 24768]) ("unibasic-looking-at" function (:arguments ("regexp" "&optional" "line")) nil [24770 25009]) ("unibasic-electric-separator" function (:user-visible-flag t :arguments ("&optional" "count")) nil [25043 25286]) ("unibasic-skip-space-backward" function nil nil [25288 25660]) ("unibasic-electric-star" function (:user-visible-flag t :arguments ("&optional" "count")) nil [25662 25990]) ("unibasic-electric-dollar" function (:user-visible-flag t :arguments ("&optional" "count")) nil [25992 26305]) ("unibasic-electric-colon" function (:user-visible-flag t :arguments ("&optional" "count")) nil [26307 26785]) ("unibasic-electric-tab" function (:user-visible-flag t :arguments ("&optional" "count")) nil [26787 27363]) ("unibasic-electric-newline" function (:user-visible-flag t :arguments ("&optional" "count")) nil [27365 27675]) ("unibasic-continued-newline" function (:user-visible-flag t) nil [27677 27929]) ("unibasic-append-comment" function (:user-visible-flag t :arguments ("&optional" "count")) nil [27931 28431]) ("unibasic-pre-abbrev-expand-hook" function nil nil [28435 28788]) ("unibasic-construct-keyword-abbrev-table" function nil nil [28790 29376]) ("unibasic-forward-to-separator" function (:arguments ("&optional" "count")) nil [29378 29677]) ("unibasic-backward-to-separator" function (:arguments ("&optional" "count")) nil [29679 29981]) ("unibasic-skip-to-next-label" function (:user-visible-flag t :arguments ("&optional" "count")) nil [29983 30299]) ("unibasic-skip-to-prev-label" function (:user-visible-flag t :arguments ("&optional" "count")) nil [30301 30622]) ("unibasic-prev-command" function (:user-visible-flag t :arguments ("&optional" "count")) nil [30624 30917]) ("unibasic-next-command" function (:user-visible-flag t :arguments ("&optional" "count")) nil [30919 31207]) ("unibasic-mark-label-block" function (:user-visible-flag t) nil [31209 31696]) ("unibasic-default-tag" function nil nil [31698 32065]) ("unibasic-grep" function (:user-visible-flag t :arguments ("tag")) nil [32067 32481]) ("unibasic-get-arg-align" function (:arguments ("this-col")) nil [32484 32775]) ("unibasic-indent-level" function (:arguments ("&optional" "count")) nil [32778 33945]) ("unibasic-calculate-indent" function nil nil [33947 36227]) ("unibasic-indent-line" function (:user-visible-flag t) nil [36229 38278]) ("unibasic-align-strings" function (:arguments ("line-regexp" "npieces")) nil [38286 39667]) ("unibasic-align-equates-regex-list" variable (:default-value (list "EQU\\(?:ATE\\)" "\\S-+" "TO\\|LIT\\(?:ERALLY\\)?" "[^ 	
]+" "\\(?:;.*\\)?$")) nil [39674 39837]) ("unibasic-align-assignment-regex-list" variable (:default-value (list "\\S-+" "=" "[^;
]+")) nil [39927 40001]) ("unibasic-make-alignment-regex" function (:arguments ("rx-list")) nil [40003 40299]) ("unibasic-align-2column-assignments-regex-list" variable (:default-value (list "\\S-+" "=" "[0-9]+\\|'[^'
]*'" ";" "\\S-+" "=" "[0-9]+\\|'[^'
]*'")) nil [40301 40442]) ("unibasic-align-equate-values" function nil nil [40444 40679]) ("unibasic-align-assignments" function nil nil [40681 40917]) ("unibasic-align-2column-assignments" function nil nil [40919 41172]) ("unibasic-align-command-pairs" function nil nil [42438 43764]) ("unibasic-fume-function-name-regexp" variable (:constant-flag t :default-value "^[ 	]*\\(\\([0-9]+:?\\)\\|\\([a-zA-Z][a-zA-Z0-9_$\\.]*:\\)\\)") nil [43774 43958]) ("unibasic-fume-find-next-function-name" function (:user-visible-flag t :arguments ("buffer")) nil [43960 44366]) ("unibasic-magic-labels" function (:user-visible-flag t :arguments ("&optional" "start" "end")) nil [44368 45880]) ("unibasic-set-labels-alist" function (:arguments ("&optional" "arg")) nil [45882 46228]) ("unibasic-scan-for-labels" function (:user-visible-flag t :arguments ("buffer")) nil [46230 46937]) ("unibasic-find-magic-labels" function (:user-visible-flag t) nil [46939 47180]) ("unibasic-event-point" function (:arguments ("event")) nil [47182 47319]) ("unibasic-event-window" function (:arguments ("event")) nil [47321 47461]) ("unibasic-follow-label" function (:user-visible-flag t :arguments ("event")) nil [47463 48478]) ("unibasic-label-position" function (:arguments ("label")) nil [48480 48848]) ("unibasic-insert-emacs-tag" function (:user-visible-flag t) nil [48865 49393]) ("unibasic-make-regexp" function (:arguments ("words")) nil [49395 50204]) ("unibasic-command-words" variable (:default-value (quote ("$BASICTYPE" "$DEFINE" "$UNDEFINE" "$IFDEF" "$ELSE" "$ENDIF" "$IFNDEF" "$INCLUDE" "$INSERT" "ABORT" "ASSIGN" "BEGIN" "BPIOCP" "BREAK" "CALL" "CALLC" "CASE" "CHAIN" "CLEAR" "CLEARCOM" "CLEARCOMMON" "CLEARDATA" "CLEARFILE" "CLEARINPUT" "CLEARSELECT" "CLEARSQL" "CLOSE" "CLOSESEQ" "COM" "COMMENT" "COMMIT" "COMMON" "CONNECT" "CONTINUE" "CONVERT" "CRT" "DATA" "DEBUG" "DEFFUN" "DEL" "DELETE" "DELETELIST" "DELETION" "DELETEU" "DIM" "DIMENSION" "DISCONNECT" "DISPLAY" "ECHO" "END" "ENTER" "EQU" "EQUATE" "EXECUTE" "EXECUTESQL" "EXIT" "FILELOCK" "FILEUNLOCK" "FIND" "FINDSTR" "FOOTING" "FOR" "FORMLIST" "FUNCTION" "GARBAGECOLLECT" "GET" "GETCOLUMNDATA" "GETCOLUMNNAME" "GETLIST" "GETX" "GOSUB" "GOTO" "GROUPSTORE" "HEADING" "HUSH" "IF" "INPUT" "INPUTCLEAR" "INPUTERR" "INPUTIF" "INPUTNULL" "INPUTTRAP" "INS" "LOCATE" "LOCK" "LOOP" "MAT" "MATBUILD" "MATPARSE" "MATREAD" "MATREADL" "MATREADU" "MATWRITE" "MATWRITEU" "MDPERFORM" "NOCONVERT" "NULL" "ON" "OPEN" "OPENSEQ" "OSBREAD" "OSBWRITE" "OSCLOSE" "OSDELETE" "OSOPEN" "OSREAD" "OSWRITE" "PAGE" "PCPERFORM" "PERFORM" "PRECISION" "PRINT" "PRINTER" "PRINTERCLOSE" "PRINTERR" "PROCREAD" "PROCWRITE" "PROGRAM" "PROMPT" "READ" "READBCK" "READBCKL" "READBCKU" "READFWD" "READFWDL" "READFWDU" "READL" "READLIST" "READNEXT" "READNEXTTUPLE" "READSEQ" "READT" "READU" "READV" "READVL" "READVU" "RECORDLOCKL" "RECORDLOCKU" "RELEASE" "REM" "REMOVE" "REPEAT" "RESIZET" "RETURN" "REWIND" "RNDSEED" "ROLLBACK" "RQM" "SELECT" "SELECTINDEX" "SEND" "SENDX" "SETINDEX" "SETMARK" "SLEEP" "STOP" "SUBROUTINE" "SWAP" "TIMEOUT" "UDTEXECUTE" "UNLOCK" "WEOF" "WEOFSEQ" "WRITE" "WRITELIST" "WRITESEQ" "WRITESEQF" "WRITET" "WRITEU" "WRITEV" "WRITEVU"))) nil [50426 52484]) ("unibasic-command-regexp" variable (:default-value (eval-when-compile (concat "\\(^\\|[; 	]\\)\\(" (make-regexp unibasic-command-words) "\\)\\([; 	]\\|$\\)"))) nil [52487 52659]) ("unibasic-keyword-words" variable (:default-value (quote ("$F" "$FALSE" "$T" "$TRUE" "ALL" "APPEND" "AT" "BEFORE" "BY" "CALLING" "CAPTURING" "CASE" "DO" "ELSE" "ERROR" "FLUSH" "FROM" "GO" "IN" "INCLUDE" "KEY" "LENGTH" "LINEMARK" "LIT" "LITERALLY" "LOCKED" "MAT" "NEXT" "ON" "OFF" "PASSCOM" "PASSCOMMON" "PASSLIST" "READONLY" "RETURNING" "RTNLIST" "SETTING" "STEP" "THEN" "TO" "UNIT" "UNTIL" "USING" "WAITING" "WHILE" "WITH" "WORK"))) nil [52681 53128]) ("unibasic-keyword-regexp" variable (:default-value (eval-when-compile (concat "\\(^\\|[; 	]\\)\\(" (make-regexp unibasic-keyword-words) "\\)\\([; 	]\\|$\\)"))) nil [53131 53304]) ("unibasic-operator-words" variable (:default-value (quote ("EQ" "NE" "LE" "LT" "GE" "GT" "AND" "OR" "MATCH" "MATCHES" "CAT"))) nil [53326 53431]) ("unibasic-operator-regexp" variable (:default-value (eval-when-compile (concat "\\b\\(" (make-regexp unibasic-operator-words) "\\)\\b"))) nil [53434 53558]) ("unibasic-function-words" variable (:default-value (quote ("ABS" "ACOS" "ALPHA" "ASCII" "ASIN" "ATAN" "BITAND" "BITOR" "BITXOR" "BITNOT" "CALCULATE" "CATS" "CHANGE" "CHAR" "CHECKSUM" "COL1" "COL2" "CONVERT" "COS" "COUNT" "COUNTS" "DATE" "DCOUNT" "DELETE" "DIR" "DOWNCASE" "DROUND" "DQUOTE" "DTX" "EBDIC" "EQS" "EXP" "EXTRACT" "FIELD" "FIELDS" "FIELDSTORE" "FMT" "FMTS" "GES" "GETENV" "GETMSG" "GETPU" "GETUSERNAME" "GETUSERGROUP" "GETPTR" "GROUP" "GTS" "HASH" "ICONV" "IN" "INDEX" "INDEXS" "INDICES" "INMAT" "INSERT" "INT" "ITYPE" "LEN" "LENS" "LES" "LN" "LOWER" "LTS" "MATCHFIELD" "MAXIMUM" "MINIMUM" "MOD" "NEG" "NES" "NOT" "NOTS" "NUM" "NUMS" "OCONV" "OCONVS" "PWR" "QUOTE" "RAISE" "REM" "REMOVE" "REPLACE" "REUSE" "RND" "SADD" "SCMP" "SDIV" "SELECTINFO" "SEQ" "SEQS" "SIN" "SMUL" "SPACE" "SPACES" "SPLICE" "SPLICES" "SQRT" "SQUOTE" "SSUB" "STATUS" "STR" "STRS" "SUBSTRINGS" "SUM" "SYSTEM" "TAN" "TIME" "TIMEDATE" "TRIM" "TRIMB" "TRIMF" "TRIMS" "UNASSIGNED" "UPCASE" "XLATE" "XTD"))) nil [53580 54636]) ("unibasic-function-regexp" variable (:default-value (eval-when-compile (concat "\\b\\(" (make-regexp unibasic-function-words) "\\)\\b[ 	]*("))) nil [54639 54770]) ("unibasic-special-words" variable (:default-value (quote ("@AM" "@VM" "@SM" "@FM" "@RM" "@TM" "@SVM" "@ACCOUNT" "@COMMAND" "@CONV" "@CRTHIGH" "@CRTWIDE" "@DATA" "@DATE" "@NULL" "@DAY" "@DICT" "@FORMAT" "@GID" "@HEADER" "@ID" "@LEVEL" "@LOGNAME" "@LPTRHIGH" "@LPTRWIDE" "@MONTH" "@PARASENTENCE" "@PATH" "@RECORD" "@RECUR0" "@RECUR1" "@RECUR2" "@RECUR3" "@RECUR4" "@SENTENCE" "@SYS.BELL" "@SYSTEM.RETURN.CODE" "@TIME" "@TTY" "@TUPLE" "@UID" "@UDTNO" "@USER0" "@USER1" "@USER2" "@USER3" "@USER4" "@USERNO" "@USER.RETURN.CODE" "@USER.TYPE" "@WHO" "@YEAR"))) nil [54792 55431]) ("unibasic-special-regexp" variable (:default-value (eval-when-compile (make-regexp unibasic-special-words))) nil [55434 55529]) ("unibasic-font-lock-syntactic-keywords" variable (:user-visible-flag t :default-value (if (not unibasic-font-lock-syntactify) nil (list (quote ("\\(^[ 	]*\\|;[ 	]*\\)\\(\\*\\)" 2 (11)))))) nil [55531 55810]) ("unibasic-font-lock-keywords" variable (:user-visible-flag t :default-value (let ((clist (if (not unibasic-font-lock-syntactify) (list (cons "\\(^\\|;\\)[ 	]*\\(\\*\\|!.*\\)$" (quote (2 font-lock-comment-face)))))) (mlist (list (cons unibasic-label-regexp (quote font-lock-reference-face)) (cons unibasic-special-regexp (quote font-lock-variable-name-face)) (cons unibasic-function-regexp (quote (1 font-lock-type-face))) (cons unibasic-keyword-regexp (quote (2 font-lock-function-name-face))) (cons unibasic-command-regexp (quote (2 font-lock-function-name-face))) (cons unibasic-operator-regexp (quote font-lock-keyword-face)) (cons "@([^)]*)" (quote font-lock-variable-name-face))))) (append clist mlist))) nil [55812 56646]) ("cond" code nil nil [56840 57189]) ("unibasic-mode-help-address" variable (:constant-flag t :default-value "unibasic@zsplat.freeserve.co.uk") nil [57403 57537]) ("unibasic-submit-bug-report" function (:user-visible-flag t) nil [57539 58273]) ("unibasic" package nil nil [58276 58295]))
    :file "unibasic.el"
    :pointmax 58520
    :unmatched-syntax 'nil
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0beta3"
  :semanticdb-version "2.0beta3"
  )
