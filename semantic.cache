;; Object u2-mode/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "u2-mode/"
  :tables (list 
   (semanticdb-table "u2-cache.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("nilstring" function (:arguments ("string")) nil [6690 6763]) ("non-nilstring" function (:arguments ("string")) nil [6764 6834]) ("unidata-user-hashtable" variable (:default-value (make-hash-table :test (quote equal))) nil [7208 7270]) ("unidata-passwd-hashtable" variable (:default-value (make-hash-table :test (quote equal))) nil [7271 7335]) ("unidata-account-path-hashtable" variable (:default-value (make-hash-table :test (quote equal))) nil [7336 7406]) ("unidata-hosts" variable nil nil [7407 7433]) ("unidata-prompt-for-host" function nil nil [7435 7807]) ("unidata-set-user" function (:user-visible-flag t :arguments ("host" "user")) nil [7809 7980]) ("unidata-get-user" function (:arguments ("host")) nil [7982 8301]) ("unidata-build-host-path" function (:arguments ("&optional" "host")) nil [8306 8578]) ("unidata-remote-path-p" function (:arguments ("path")) nil [8580 8673]) ("unidata-path-splitting-regexp" variable (:default-value "/\\(?:\\(?:\\([^:]+\\):\\)?\\)\\([^@]+\\)@\\([^:]+\\):\\(.*\\)") nil [8675 9167]) ("unidata-split-host-path" function (:arguments ("path")) nil [9169 9845]) ("unidata-break-account-path" function (:arguments ("path")) nil [9847 9929]) ("unidata-set-account-path" function (:user-visible-flag t :arguments ("host" "account-path")) nil [9931 10142]) ("unidata-get-account-path" function (:arguments ("&optional" "host")) nil [10144 10366]) ("unidata-prompt-for-account-path" function (:arguments ("&optional" "host")) nil [10368 11181]) ("unidata-set-passwd" function (:user-visible-flag t :arguments ("host" "user" "passwd")) nil [11340 11634]) ("unidata-get-host-with-passwd" function (:arguments ("user")) nil [11636 12294]) ("unidata-get-passwd" function (:arguments ("host" "user")) nil [12296 13202]) ("u2-cache" package nil nil [13205 13224]))
    :file "u2-cache.el"
    :pointmax 13224
    :unmatched-syntax 'nil
    )
   (semanticdb-table "u2-compile.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("unidata" include nil nil [1710 1728]) ("unibasic" include nil nil [1729 1748]) ("unibasic-basic-cmd-string" variable (:default-value "BASIC") nil [1750 2122]) ("unibasic-default-source-table" variable (:default-value "BP") nil [2149 2300]) ("unibasic-catalog-command" variable (:default-value "CATALOG") nil [2301 2630]) ("if" code nil nil [2686 2933]) ("if" code nil nil [2934 3196]) ("unibasic-emacs-version-or-newer" function (:arguments ("major" "minor")) nil [3198 3372]) ("when" code nil nil [3374 4405]) ("unibasic-compile-options-alist" variable (:default-value (quote (("-D" "Generate X-Reference for debugger") ("-G" "Enable profiling") ("-LIST" "Generate a list of the program") ("-XREF" "Generate a cross reference table") ("-Z2" "Enable debugging") ("-I" "Keywords are case insensitive")))) nil [4407 4694]) ("unibasic-basic-cmd-string" variable (:default-value "BASIC") nil [4735 4777]) ("unibasic-default-source-table" function (:arguments ("file")) nil [4779 4830]) ("unibasic-get-source-table" function (:arguments ("file-name")) nil [4833 5081]) ("unibasic-compile-command" function (:arguments ("file")) nil [5083 5334]) ("unibasic-compile-file" function (:arguments ("ud-proc" "file" "&optional" "catalog-p")) nil [5336 5534]) ("unibasic-catalog-method" variable (:default-value (quote local)) nil [5536 5948]) ("unibasic-catalog-file" function (:arguments ("ud-proc" "file")) nil [5950 6373]) ("unibasic-catalog" function nil nil [6375 6516]) ("unibasic-compile" function nil nil [6518 6660]) ("unibasic-compile-and-catalog" function nil nil [6662 7054]) ("host-is-this-host" function (:arguments ("host")) nil [7056 7094]) ("def-local-var" function (:arguments ("varname" "value" "&optional" "doc")) nil [7119 7269]) ("unibasic-compile" package nil nil [7272 7299]))
    :file "u2-compile.el"
    :pointmax 7409
    :unmatched-syntax 'nil
    )
   (semanticdb-table "u2-dired.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("unidata" include nil nil [2513 2531]) ("cookie" include nil nil [2532 2549]) ("u2-dired" variable (:constant-flag t :default-value "@(#)$Id$") nil [2551 2680]) ("setmax" function (:arguments ("max" "maybe")) nil [2682 2771]) ("chomp" function (:arguments ("str")) nil [2773 2880]) ("def-local-var" function (:arguments ("varname" "value" "&optional" "doc")) nil [2905 3055]) ("unidata-parse-file-list" function (:arguments ("buf")) nil [3225 3627]) ("unidata-parse-listf-output" function (:arguments ("buffer")) nil [3630 3902]) ("unidata-get-next-entry" function (:arguments ("buffer")) nil [3904 4377]) ("unidata-filelist-done-regexp" variable (:default-value "^[0-9]+ records? listed.*") nil [4380 4582]) ("unidata-list-command" variable (:default-value "LIST VOC F1 F2 F3 WITH F1 LIKE 'F...' OR F1 LIKE 'f...' OR F1 LIKE 'DIR...' OR F1 LIKE 'dir...' OR F1 LIKE 'LF...' OR F1 LIKE 'lf...' OR F1 LIKE 'LD...' OR F1 LIKE 'ld...' BY F1 BY @ID HDR.SUPP COL.HDR.SUPP VERTICAL") nil [4584 5005]) ("unidata-redirect-listf" function nil nil [5007 5280]) ("unidata-send-output-to-buf" function (:arguments ("proc" "cmd" "buf-name")) nil [5283 5779]) ("u2-dired-list" variable nil nil [5784 5810]) ("u2-dired-cookies" variable nil nil [5811 5840]) ("u2-dired-create-display-buffer" function (:arguments ("list-buf")) nil [5841 6234]) ("u2-dired-pad-string" function (:arguments ("str" "len")) nil [6266 6689]) ("u2-dired-cookie-display-function" function (:arguments ("cookie")) nil [6946 7451]) ("u2-dired-mode-syntax-table" variable nil nil [7608 7686]) ("if" code nil nil [7687 7960]) ("u2-dired-mode-abbrev-table" variable nil nil [7963 8044]) ("define-abbrev-table" code nil nil [8046 8098]) ("u2-dired-mode-map" variable nil nil [8100 8163]) ("u2-dired-toggle-auto-upcase" function nil nil [8165 8294]) ("u2-dired-menu" variable (:default-value (make-sparse-keymap "Unidata")) nil [8296 8349]) ("if" code nil nil [8351 9104]) ("define-derived-mode" code nil nil [9107 9331]) ("u2-dired" function (:user-visible-flag t :arguments ("&optional" "host")) nil [9416 10141]) ("unidata-view-account-in-dired" function (:arguments ("&optional" "host")) nil [10151 10394]) ("unidata" package nil nil [10397 10415]))
    :file "u2-dired.el"
    :pointmax 10525
    :unmatched-syntax 'nil
    )
   (semanticdb-table "unibasic.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("unibasic-rcs-version" variable (:constant-flag t :default-value "@(#)$Id$") nil [2776 2918]) ("unibasic-mode-version" variable (:constant-flag t :default-value (if (string-match "\\<[0-9]+\\.[0-9]+\\>" unibasic-rcs-version) (substring unibasic-rcs-version (match-beginning 0) (match-end 0)) "0.0")) nil [2920 3390]) ("if" code nil nil [3737 4060]) ("unibasic-emacs-type" variable (:default-value (cond ((string-match "XEmacs" emacs-version) (quote xemacs)) ((string-match "Lucid" emacs-version) (quote lucid)) ((string-match "Epoch" emacs-version) (quote epoch)) (t (quote emacs)))) nil [4090 4302]) ("if" code nil nil [4358 4605]) ("if" code nil nil [4606 4868]) ("unibasic-emacs-version-or-newer" function (:arguments ("major" "minor")) nil [4869 5043]) ("cond" code nil nil [5045 9674]) ("unibasic-label-regexp" variable (:default-value "^[ 	]*\\(\\([0-9]+:?\\)\\|\\([a-zA-Z][a-zA-Z0-9_$\\.]*:\\)\\)") nil [9676 9831]) ("unibasic-comment-regexp" variable (:default-value "\\(^[ 	]*[!\\*]\\)\\|\\(;[ 	]*\\*.*\\)") nil [9833 9970]) ("unibasic-block-inter-regexp" variable (:default-value "[ 	]*\\<\\(UNTIL\\|WHILE\\).*\\(DO\\)?[ 	]*\\($\\|;[ 	]*\\*\\)") nil [9972 10078]) ("unibasic-block-start-regexp" variable (:default-value "\\<\\(THEN\\|ELSE\\|LOCKED\\|LOOP\\|\\(UNTIL\\|WHILE\\).*DO\\|ON ERROR\\|DO\\)[ 	]*\\($\\|;[ 	]*\\*\\)") nil [10080 10327]) ("unibasic-block-end-regexp" variable (:default-value "[ 	]*\\<\\(END\\|REPEAT\\|NEXT\\)\\([ 	;]\\|$\\)") nil [10329 10518]) ("unibasic-compiler-directive-regexp" variable (:default-value "^\\s-*\\$") nil [10520 10699]) ("unibasic-continuation-char" variable (:default-value 124) nil [10701 10921]) ("unibasic-separator-char" variable (:default-value 59) nil [10923 11010]) ("unibasic-labels-timer" variable nil nil [11012 11125]) ("unibasic-imenu-generic-expression" variable (:default-value (list (list "LABELS" unibasic-label-regexp 0))) nil [11127 11488]) ("unibasic-labels-alist" variable nil nil [11490 11571]) ("unibasic-mode-abbrev-table" variable nil nil [11573 11668]) ("define-abbrev-table" code nil nil [11669 11721]) ("unibasic-mode-syntax-table" variable nil nil [11723 11812]) ("if" code nil nil [11813 13704]) ("unibasic-mode-map" variable nil nil [13706 13779]) ("unibasic-menu-map" variable nil nil [13780 13871]) ("if" code nil nil [13872 17031]) ("unibasic-xemacs-menu" variable (:constant-flag t :default-value (quote ("Unibasic" ["Forward by Command" unibasic-next-command t] ["Backward by Command" unibasic-prev-command t] ["Forward by Label" unibasic-skip-to-next-label t] ["Backward by Label" unibasic-skip-to-prev-label t] ["Mark Label Block" unibasic-mark-label-block t] ["Indent Region" unibasic-indent-region t] ["Comment Region" comment-region t] ["Uncomment Region" unibasic-uncomment-region nil] "----" ["Append Comment" unibasic-append-comment t] ["Append Emacs Tag" unibasic-insert-emacs-tag t] "----" ["Send bug report" unibasic-submit-bug-report t]))) nil [17094 17842]) ("unibasic-mode" function (:user-visible-flag t) nil [17859 21806]) ("unibasic-get-bol" function (:arguments ("&optional" "arg")) nil [22050 22144]) ("unibasic-get-eol" function (:arguments ("&optional" "arg")) nil [22145 22233]) ("unibasic-within-string" function nil nil [22234 22345]) ("unibasic-within-comment" function nil nil [22346 22458]) ("unibasic-vboundp" function (:arguments ("symbol")) nil [22460 22631]) ("if" code nil nil [22679 22928]) ("unibasic-cancel-timer" function (:arguments ("arg")) nil [22930 23116]) ("unibasic-add-timer" function (:arguments ("timeout" "func")) nil [23126 23422]) ("unibasic-label-only-regexp" function nil nil [23424 23551]) ("unibasic-continued-line" function (:arguments ("&optional" "line")) nil [23553 23849]) ("unibasic-syntactic-line" function (:arguments ("line")) nil [23851 24454]) ("unibasic-looking-at" function (:arguments ("regexp" "&optional" "line")) nil [24456 24695]) ("unibasic-electric-separator" function (:user-visible-flag t :arguments ("&optional" "count")) nil [24729 24972]) ("unibasic-skip-space-backward" function nil nil [24974 25346]) ("unibasic-electric-star" function (:user-visible-flag t :arguments ("&optional" "count")) nil [25348 25676]) ("unibasic-electric-dollar" function (:user-visible-flag t :arguments ("&optional" "count")) nil [25678 25991]) ("unibasic-electric-colon" function (:user-visible-flag t :arguments ("&optional" "count")) nil [25993 26471]) ("unibasic-electric-tab" function (:user-visible-flag t :arguments ("&optional" "count")) nil [26473 27049]) ("unibasic-electric-newline" function (:user-visible-flag t :arguments ("&optional" "count")) nil [27051 27361]) ("unibasic-continued-newline" function (:user-visible-flag t) nil [27363 27615]) ("unibasic-append-comment" function (:user-visible-flag t :arguments ("&optional" "count")) nil [27617 28117]) ("unibasic-pre-abbrev-expand-hook" function nil nil [28121 28474]) ("unibasic-construct-keyword-abbrev-table" function nil nil [28476 29062]) ("unibasic-forward-to-separator" function (:arguments ("&optional" "count")) nil [29064 29363]) ("unibasic-backward-to-separator" function (:arguments ("&optional" "count")) nil [29365 29667]) ("unibasic-skip-to-next-label" function (:user-visible-flag t :arguments ("&optional" "count")) nil [29669 29985]) ("unibasic-skip-to-prev-label" function (:user-visible-flag t :arguments ("&optional" "count")) nil [29987 30308]) ("unibasic-prev-command" function (:user-visible-flag t :arguments ("&optional" "count")) nil [30310 30603]) ("unibasic-next-command" function (:user-visible-flag t :arguments ("&optional" "count")) nil [30605 30893]) ("unibasic-mark-label-block" function (:user-visible-flag t) nil [30895 31382]) ("unibasic-default-tag" function nil nil [31384 31751]) ("unibasic-grep" function (:user-visible-flag t :arguments ("tag")) nil [31753 32167]) ("unibasic-get-arg-align" function (:arguments ("this-col")) nil [32170 32461]) ("unibasic-indent-level" function (:arguments ("&optional" "count")) nil [32464 33631]) ("unibasic-calculate-indent" function nil nil [33633 35913]) ("unibasic-indent-line" function (:user-visible-flag t) nil [35915 37964]) ("unibasic-align-equate-values" function nil nil [37967 38832]) ("unibasic-align-command-pairs" function nil nil [38852 40178]) ("unibasic-fume-function-name-regexp" variable (:constant-flag t :default-value "^[ 	]*\\(\\([0-9]+:?\\)\\|\\([a-zA-Z][a-zA-Z0-9_$\\.]*:\\)\\)") nil [40188 40372]) ("unibasic-fume-find-next-function-name" function (:user-visible-flag t :arguments ("buffer")) nil [40374 40780]) ("unibasic-magic-labels" function (:user-visible-flag t :arguments ("&optional" "start" "end")) nil [40782 42294]) ("unibasic-set-labels-alist" function (:arguments ("&optional" "arg")) nil [42296 42642]) ("unibasic-scan-for-labels" function (:user-visible-flag t :arguments ("buffer")) nil [42644 43351]) ("unibasic-find-magic-labels" function (:user-visible-flag t) nil [43353 43594]) ("unibasic-event-point" function (:arguments ("event")) nil [43596 43733]) ("unibasic-event-window" function (:arguments ("event")) nil [43735 43875]) ("unibasic-follow-label" function (:user-visible-flag t :arguments ("event")) nil [43877 44892]) ("unibasic-label-position" function (:arguments ("label")) nil [44894 45262]) ("unibasic-insert-emacs-tag" function (:user-visible-flag t) nil [45279 45807]) ("unibasic-make-regexp" function (:arguments ("words")) nil [45809 46618]) ("unibasic-command-words" variable (:default-value (quote ("$BASICTYPE" "$DEFINE" "$UNDEFINE" "$IFDEF" "$ELSE" "$ENDIF" "$IFNDEF" "$INCLUDE" "$INSERT" "ABORT" "ASSIGN" "BEGIN" "BPIOCP" "BREAK" "CALL" "CALLC" "CASE" "CHAIN" "CLEAR" "CLEARCOM" "CLEARCOMMON" "CLEARDATA" "CLEARFILE" "CLEARINPUT" "CLEARSELECT" "CLEARSQL" "CLOSE" "CLOSESEQ" "COM" "COMMENT" "COMMIT" "COMMON" "CONNECT" "CONTINUE" "CONVERT" "CRT" "DATA" "DEBUG" "DEFFUN" "DEL" "DELETE" "DELETELIST" "DELETION" "DELETEU" "DIM" "DIMENSION" "DISCONNECT" "DISPLAY" "ECHO" "END" "ENTER" "EQU" "EQUATE" "EXECUTE" "EXECUTESQL" "EXIT" "FILELOCK" "FILEUNLOCK" "FIND" "FINDSTR" "FOOTING" "FOR" "FORMLIST" "FUNCTION" "GARBAGECOLLECT" "GET" "GETCOLUMNDATA" "GETCOLUMNNAME" "GETLIST" "GETX" "GOSUB" "GOTO" "GROUPSTORE" "HEADING" "HUSH" "IF" "INPUT" "INPUTCLEAR" "INPUTERR" "INPUTIF" "INPUTNULL" "INPUTTRAP" "INS" "LOCATE" "LOCK" "LOOP" "MAT" "MATBUILD" "MATPARSE" "MATREAD" "MATREADL" "MATREADU" "MATWRITE" "MATWRITEU" "MDPERFORM" "NOCONVERT" "NULL" "ON" "OPEN" "OPENSEQ" "OSBREAD" "OSBWRITE" "OSCLOSE" "OSDELETE" "OSOPEN" "OSREAD" "OSWRITE" "PAGE" "PCPERFORM" "PERFORM" "PRECISION" "PRINT" "PRINTER" "PRINTERCLOSE" "PRINTERR" "PROCREAD" "PROCWRITE" "PROGRAM" "PROMPT" "READ" "READBCK" "READBCKL" "READBCKU" "READFWD" "READFWDL" "READFWDU" "READL" "READLIST" "READNEXT" "READNEXTTUPLE" "READSEQ" "READT" "READU" "READV" "READVL" "READVU" "RECORDLOCKL" "RECORDLOCKU" "RELEASE" "REM" "REMOVE" "REPEAT" "RESIZET" "RETURN" "REWIND" "RNDSEED" "ROLLBACK" "RQM" "SELECT" "SELECTINDEX" "SEND" "SENDX" "SETINDEX" "SETMARK" "SLEEP" "STOP" "SUBROUTINE" "SWAP" "TIMEOUT" "UDTEXECUTE" "UNLOCK" "WEOF" "WEOFSEQ" "WRITE" "WRITELIST" "WRITESEQ" "WRITESEQF" "WRITET" "WRITEU" "WRITEV" "WRITEVU"))) nil [46840 48898]) ("unibasic-command-regexp" variable (:default-value (eval-when-compile (concat "\\(^\\|[; 	]\\)\\(" (make-regexp unibasic-command-words) "\\)\\([; 	]\\|$\\)"))) nil [48901 49073]) ("unibasic-keyword-words" variable (:default-value (quote ("$F" "$FALSE" "$T" "$TRUE" "ALL" "APPEND" "AT" "BEFORE" "BY" "CALLING" "CAPTURING" "CASE" "DO" "ELSE" "ERROR" "FLUSH" "FROM" "GO" "IN" "INCLUDE" "KEY" "LENGTH" "LINEMARK" "LIT" "LITERALLY" "LOCKED" "MAT" "NEXT" "ON" "OFF" "PASSCOM" "PASSCOMMON" "PASSLIST" "READONLY" "RETURNING" "RTNLIST" "SETTING" "STEP" "THEN" "TO" "UNIT" "UNTIL" "USING" "WAITING" "WHILE" "WITH" "WORK"))) nil [49095 49542]) ("unibasic-keyword-regexp" variable (:default-value (eval-when-compile (concat "\\(^\\|[; 	]\\)\\(" (make-regexp unibasic-keyword-words) "\\)\\([; 	]\\|$\\)"))) nil [49545 49718]) ("unibasic-operator-words" variable (:default-value (quote ("EQ" "NE" "LE" "LT" "GE" "GT" "AND" "OR" "MATCH" "MATCHES" "CAT"))) nil [49740 49845]) ("unibasic-operator-regexp" variable (:default-value (eval-when-compile (concat "\\b\\(" (make-regexp unibasic-operator-words) "\\)\\b"))) nil [49848 49972]) ("unibasic-function-words" variable (:default-value (quote ("ABS" "ACOS" "ALPHA" "ASCII" "ASIN" "ATAN" "BITAND" "BITOR" "BITXOR" "BITNOT" "CALCULATE" "CATS" "CHANGE" "CHAR" "CHECKSUM" "COL1" "COL2" "CONVERT" "COS" "COUNT" "COUNTS" "DATE" "DCOUNT" "DELETE" "DIR" "DOWNCASE" "DROUND" "DQUOTE" "DTX" "EBDIC" "EQS" "EXP" "EXTRACT" "FIELD" "FIELDS" "FIELDSTORE" "FMT" "FMTS" "GES" "GETENV" "GETMSG" "GETPU" "GETUSERNAME" "GETUSERGROUP" "GETPTR" "GROUP" "GTS" "HASH" "ICONV" "IN" "INDEX" "INDEXS" "INDICES" "INMAT" "INSERT" "INT" "ITYPE" "LEN" "LENS" "LES" "LN" "LOWER" "LTS" "MATCHFIELD" "MAXIMUM" "MINIMUM" "MOD" "NEG" "NES" "NOT" "NOTS" "NUM" "NUMS" "OCONV" "OCONVS" "PWR" "QUOTE" "RAISE" "REM" "REMOVE" "REPLACE" "REUSE" "RND" "SADD" "SCMP" "SDIV" "SELECTINFO" "SEQ" "SEQS" "SIN" "SMUL" "SPACE" "SPACES" "SPLICE" "SPLICES" "SQRT" "SQUOTE" "SSUB" "STATUS" "STR" "STRS" "SUBSTRINGS" "SUM" "SYSTEM" "TAN" "TIME" "TIMEDATE" "TRIM" "TRIMB" "TRIMF" "TRIMS" "UNASSIGNED" "UPCASE" "XLATE" "XTD"))) nil [49994 51050]) ("unibasic-function-regexp" variable (:default-value (eval-when-compile (concat "\\b\\(" (make-regexp unibasic-function-words) "\\)\\b[ 	]*("))) nil [51053 51184]) ("unibasic-special-words" variable (:default-value (quote ("@AM" "@VM" "@SM" "@FM" "@RM" "@TM" "@SVM" "@ACCOUNT" "@COMMAND" "@CONV" "@CRTHIGH" "@CRTWIDE" "@DATA" "@DATE" "@NULL" "@DAY" "@DICT" "@FORMAT" "@GID" "@HEADER" "@ID" "@LEVEL" "@LOGNAME" "@LPTRHIGH" "@LPTRWIDE" "@MONTH" "@PARASENTENCE" "@PATH" "@RECORD" "@RECUR0" "@RECUR1" "@RECUR2" "@RECUR3" "@RECUR4" "@SENTENCE" "@SYS.BELL" "@SYSTEM.RETURN.CODE" "@TIME" "@TTY" "@TUPLE" "@UID" "@UDTNO" "@USER0" "@USER1" "@USER2" "@USER3" "@USER4" "@USERNO" "@USER.RETURN.CODE" "@USER.TYPE" "@WHO" "@YEAR"))) nil [51206 51845]) ("unibasic-special-regexp" variable (:default-value (eval-when-compile (make-regexp unibasic-special-words))) nil [51848 51943]) ("unibasic-font-lock-syntactic-keywords" variable (:user-visible-flag t :default-value (if (not unibasic-font-lock-syntactify) nil (list (quote ("\\(^[ 	]*\\|;[ 	]*\\)\\(\\*\\)" 2 (11)))))) nil [51945 52224]) ("unibasic-font-lock-keywords" variable (:user-visible-flag t :default-value (let ((clist (if (not unibasic-font-lock-syntactify) (list (cons "\\(^\\|;\\)[ 	]*\\(\\*\\|!.*\\)$" (quote (2 font-lock-comment-face)))))) (mlist (list (cons unibasic-label-regexp (quote font-lock-reference-face)) (cons unibasic-special-regexp (quote font-lock-variable-name-face)) (cons unibasic-function-regexp (quote (1 font-lock-type-face))) (cons unibasic-keyword-regexp (quote (2 font-lock-function-name-face))) (cons unibasic-command-regexp (quote (2 font-lock-function-name-face))) (cons unibasic-operator-regexp (quote font-lock-keyword-face)) (cons "@([^)]*)" (quote font-lock-variable-name-face))))) (append clist mlist))) nil [52226 53060]) ("cond" code nil nil [53254 53603]) ("unibasic-mode-help-address" variable (:constant-flag t :default-value "unibasic@zsplat.freeserve.co.uk") nil [53817 53951]) ("unibasic-submit-bug-report" function (:user-visible-flag t) nil [53953 54687]) ("unibasic" package nil nil [54690 54709]))
    :file "unibasic.el"
    :pointmax 54819
    :unmatched-syntax 'nil
    )
   (semanticdb-table "unidata.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("comint" include nil nil #<overlay in no buffer>) ("telnet" include nil nil #<overlay in no buffer>) ("u2-cache" include nil nil #<overlay in no buffer>) ("unidata-rcs-version" variable (:constant-flag t :default-value "@(#)$Id$") nil #<overlay in no buffer>) ("unidata-mode-version" variable (:constant-flag t :default-value (if (string-match "\\<[0-9]+\\.[0-9]+\\>" unidata-rcs-version) (substring unidata-rcs-version (match-beginning 0) (match-end 0)) "0.0")) nil #<overlay in no buffer>) ("if" code nil nil #<overlay in no buffer>) ("defgroup" code nil nil #<overlay in no buffer>) ("unidata-local-shell" variable (:default-value "/bin/sh") nil #<overlay in no buffer>) ("unidata-shell-prompt-regexp" variable (:default-value "^.*[>#%$][ 	]*") nil #<overlay in no buffer>) ("unidata-prompt" variable (:default-value "^.*[:>][ 	]*$") nil #<overlay in no buffer>) ("unidata-environment-alist" variable (:default-value (quote (("PS1" . "shell>") ("UDTHOME" . "/opt/ud61") ("UDTBIN" . "${UDTHOME}/bin") ("TERM" . "dumb")))) nil #<overlay in no buffer>) ("unidata-setenv-format-string" variable (:default-value "export %s=\"%s\"") nil #<overlay in no buffer>) ("unidata-new-line" variable (:default-value "
") nil #<overlay in no buffer>) ("unidata-count" variable nil nil #<overlay in no buffer>) ("unidata-account-path" variable nil nil #<overlay in no buffer>) ("unidata-udt-command" variable (:default-value "/opt/ud61/bin/udt") nil #<overlay in no buffer>) ("unidata-initial-count" variable (:default-value -40) nil #<overlay in no buffer>) ("unidata-maximum-count" variable (:default-value 4) nil #<overlay in no buffer>) ("unidata-auto-upcase-commands" variable (:user-visible-flag t) nil #<overlay in no buffer>) ("unidata-command-word-regexp" variable (:default-value "\\b\\(?:[/._]\\|\\w\\)+\\b\\|\"[^\"]*\"") nil #<overlay in no buffer>) ("unidata-command-hooks" variable (:default-value (quote (("\\`LOGTO\\'" . unidata-logto-hook) ("\\`HELP\\'" . unidata-help-hook) ("\\`BYE\\'" . unidata-bye-hook) ("\\`LO\\'" . unidata-bye-hook)))) nil #<overlay in no buffer>) ("unidata-prevent-interaction-suffix" variable (:default-value "NO.PAGE HDR.SUPP COL.HDR.SUPP COUNT.SUP") nil #<overlay in no buffer>) ("unidata-help-command-format" variable (:user-visible-flag t :default-value "LIST HELP.FILE WITH @ID LIKE \"...*%s\" TEXT NO.PAGE HDR.SUPP") nil #<overlay in no buffer>) ("unidata-help-done-regexp" variable (:default-value "^\\([0-9]+\\|No\\)[ 	]*records? listed.?") nil #<overlay in no buffer>) ("telnet-login-prompt-regexp" variable (:default-value "ogin[ 	]*:[ 	]*\\'") nil #<overlay in no buffer>) ("unidata-hide-output" variable nil nil #<overlay in no buffer>) ("unidata-process" variable nil nil #<overlay in no buffer>) ("unidata-host" variable nil nil #<overlay in no buffer>) ("host-info" variable nil nil #<overlay in no buffer>) ("setmax" function (:arguments ("max" "maybe")) nil #<overlay in no buffer>) ("chomp" function (:arguments ("str")) nil #<overlay in no buffer>) ("def-local-var" function (:arguments ("varname" "value" "&optional" "doc")) nil #<overlay in no buffer>) ("unidata-check-process" function (:arguments ("proc")) nil #<overlay in no buffer>) ("unidata-send-command" function (:arguments ("proc" "cmd" "&rest" "arg-list")) nil #<overlay in no buffer>) ("unidata-extract-source-table-regexp" variable (:constant-flag t :default-value ".*/\\([^/]+\\)/[^/]*\\'") nil #<overlay in no buffer>) ("unidata-process-initial-commands" function (:arguments ("p" "user" "host" "commands")) nil #<overlay in no buffer>) ("unidata-upcase-command-words" function (:arguments ("string")) nil #<overlay in no buffer>) ("unidata-set-mode-name" function nil nil #<overlay in no buffer>) ("unidata-logto-hook" function (:arguments ("cmd-list")) nil #<overlay in no buffer>) ("unidata-redirect" function (:arguments ("cmd" "buf-name" "proc" "done-regexp")) nil #<overlay in no buffer>) ("unidata-help-hook" function (:arguments ("cmd-list")) nil #<overlay in no buffer>) ("unidata-bye-hook" function (:arguments ("cmd-list")) nil #<overlay in no buffer>) ("unidata-filter-command" function (:arguments ("string")) nil #<overlay in no buffer>) ("unidata-send" function (:arguments ("proc" "string")) nil #<overlay in no buffer>) ("unidata-insert-prompt" function nil nil #<overlay in no buffer>) ("unidata-send-output-to-buf" function (:arguments ("proc" "cmd" "buf-name")) nil #<overlay in no buffer>) ("unidata-filter" function (:arguments ("proc" "string")) nil #<overlay in no buffer>) ("unidata-setup-environment" function (:arguments ("proc")) nil #<overlay in no buffer>) ("unidata-get-to-ud" function (:arguments ("proc")) nil #<overlay in no buffer>) ("unidata-pre-ud-filter" function (:arguments ("proc" "string")) nil #<overlay in no buffer>) ("unidata-strip-extra-lines" function (:arguments ("string")) nil #<overlay in no buffer>) ("unidata-post-ud-filter" function (:arguments ("proc" "string")) nil #<overlay in no buffer>) ("unidata-remote-initial-filter" function (:arguments ("proc" "string")) nil #<overlay in no buffer>) ("unidata-get-last-output" function nil nil #<overlay in no buffer>) ("unidata-temp-record-dir" variable (:default-value "_HOLD_") nil #<overlay in no buffer>) ("unidata-make-edit-record-command" function (:arguments ("table-name" "record-id")) nil #<overlay in no buffer>) ("unidata-make-save-record-command" function (:arguments ("tmp-file")) nil #<overlay in no buffer>) ("unidata-tmp-record-file-extension" variable (:default-value "u2rec") nil #<overlay in no buffer>) ("unidata-make-tmpfile-name" function (:arguments ("table-name" "record-id")) nil #<overlay in no buffer>) ("unidata-split-temp-record-name" function (:arguments ("tmp-name")) nil #<overlay in no buffer>) ("unidata-keep-temps-on-killing-buffer" variable (:default-value t) nil #<overlay in no buffer>) ("unidata-edit-record" function (:user-visible-flag t :arguments ("table-name" "rec-id" "&optional" "u2-buffer")) nil #<overlay in no buffer>) ("unidata-save-record" function (:arguments ("&optional" "buffer")) nil #<overlay in no buffer>) ("unidata-mode-syntax-table" variable nil nil #<overlay in no buffer>) ("if" code nil nil #<overlay in no buffer>) ("unidata-mode-abbrev-table" variable nil nil #<overlay in no buffer>) ("define-abbrev-table" code nil nil #<overlay in no buffer>) ("unidata-mode-map" variable nil nil #<overlay in no buffer>) ("unidata-toggle-auto-upcase" function nil nil #<overlay in no buffer>) ("unidata-menu" variable (:default-value (make-sparse-keymap "Unidata")) nil #<overlay in no buffer>) ("if" code nil nil #<overlay in no buffer>) ("unidata-toggle-window-dedicated" function nil nil #<overlay in no buffer>) ("define-derived-mode" code nil nil #<overlay in no buffer>) ("unidata-setup-connection" function (:arguments ("full-path" "user" "host" "path" "process")) nil #<overlay in no buffer>) ("put" code nil nil #<overlay in no buffer>) ("put" code nil nil #<overlay in no buffer>) ("put" code nil nil #<overlay in no buffer>) ("put" code nil nil #<overlay in no buffer>) ("put" code nil nil #<overlay in no buffer>) ("unidata-open-remote-connection" function (:arguments ("path")) nil #<overlay in no buffer>) ("unidata-open-local-connection" function (:arguments ("path")) nil #<overlay in no buffer>) ("unidata" function (:user-visible-flag t :arguments ("&optional" "path")) nil #<overlay in no buffer>) ("unidata-view-account-in-dired" function (:arguments ("&optional" "host")) nil #<overlay in no buffer>) ("unidata" package nil nil #<overlay in no buffer>))
    :file "unidata.el"
    :pointmax 24777
    :unmatched-syntax 'nil
    )
   (semanticdb-table "u2-load.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("load" code nil nil [24 44]) ("load" code nil nil [45 65]) ("load" code nil nil [66 85]) ("load" code nil nil [86 108]) ("load" code nil nil [109 129]))
    :file "u2-load.el"
    :pointmax 129
    :unmatched-syntax 'nil
    )
   (semanticdb-table "u2-help.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("u2-help" package nil nil [1031 1049]))
    :file "u2-help.el"
    :pointmax 1177
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0beta3"
  :semanticdb-version "2.0beta3"
  )
