\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename ../info/u2-mode
@settitle U2-MODE User Manual
@setchapternewpage odd
@c %**end of header

@c This is *so* much nicer :)
@footnotestyle end

@c In the U2-Mode CVS, the version number is auto-frobbed from
@c configure.ac, so you should edit that file and run
@c "autoconf && ./configure" to change the version number.


@include u2-modever.texi

@c Macros for formatting a filename.
@c u2-modefn is for a full filename, u2-modefnmhp means method, host, localname
@c were given, and so on.
@macro u2-modefn(method, user, host, localname)
@value{prefix}@value{method}@value{postfixhop}@value{user}@@@value{host}@value{postfix}@value{localname}
@end macro

@copying
Copyright @copyright{}   2005 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU
Manual'', and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License'' in the Emacs manual.

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.
@end quotation
@end copying

@c Entries for @command{install-info} to use
@dircategory @value{emacsname}
@direntry
* U2-MODE: (u2-mode).               @value{emacsname} Interface to IBM Unidata and Universe.
@end direntry

@tex

@titlepage
@title @value{u2-mode} version @value{u2-modever} User Manual

@author Tim Schaeffer

@page
@insertcopying

@end titlepage
@page

@end tex

@ifnottex
@node Top, Overview, (dir), (dir)
@top @value{u2-mode} version @value{u2-modever} User Manual

This file documents @value{u2-mode} version @value{u2-modever}, a
Unidata/Universe interface package for @value{emacsname}.

@value{u2-mode} provides a suite of @value{emacsname} commands, modes
and functions for working in a U2 environment.  For now, only Unidata
is supported, because that is the environment I use, and I have no
motivation to ensure that it works with Universe, or other Pick style
database environments.

You can find the latest version of this document on the web at
@uref{http://www.sourceforge.net} in the module @value{u2-mode}.

@ifset installchapter
The manual has been generated for @value{emacsname}.
@ifinfo
If you want to read the info pages for @value{emacsothername}, you
should read in @ref{Installation} how to create them.
@end ifinfo
@ifhtml
If you're using the other Emacs flavor, you should read the
@uref{@value{emacsotherfilename}, @value{emacsothername}} pages.
@end ifhtml
@end ifset


The latest release of @value{u2-mode} is available for
@uref{http://sourceforge.net/, module u2-mode}, or you may see
@ref{Obtaining U2-Mode} for more details, including the CVS server
details.

@ignore
There is a mailing list for @value{u2-mode}, available at
@email{u2-mode-devel@@gnu.org}, and archived at
@uref{http://lists.gnu.org/archive/html/u2-mode-devel/, the
@value{u2-mode} Mail Archive}.
@ifhtml
Older archives are located at
@uref{http://sourceforge.net/mailarchive/forum.php?forum=u2-mode-devel,
SourceForge Mail Archive} and
@uref{http://www.mail-archive.com/emacs-rcp@@ls6.cs.uni-dortmund.de/,
The Mail Archive}.
@c in HTML output, there's no new paragraph.
@*@*
@end ifhtml
@end ignore

@insertcopying

@end ifnottex

@menu
* Overview::                    What @value{u2-mode} can and cannot do.

For the end user:

* Obtaining U2-Mode::           How to obtain @value{u2-mode}.
* History::                     History of @value{u2-mode}.
* Configuration::               Configuring @value{u2-mode} for use.
* Usage::                       An overview of the operation of @value{u2-mode}.
* Bug Reports::                 Reporting Bugs and Problems.
* Frequently Asked Questions::  Questions and answers from the mailing list.
* Issues::                      
* Concept Index::               An item for each concept.

For the developer:


@detailmenu
 --- The Detailed Node Listing ---
@c
@ifset installchapter
Installing @value{u2-mode} with your @value{emacsname}

@end menu

@node Overview
@chapter An overview of @value{u2-mode}
@cindex overview

@value{u2-mode} provides a collection of emacs utilities for interacting
with and developing applications for IBM's UniData and Universe
Multi-value database system. 
After the installation of @value{u2-mode} into your @value{emacsname},
you will be able to 

@itemize @bullet

@item
Work enter TCL or ECL commands into an Emacs buffer;
connect to Unidata either locally or using a remote shell

@item
Edit, compile, catalog UniBasic subroutines, functions and programs---and
run the latter---using key-strokes or the Unidata menu

@item
Edit table records in an Emacs buffer

@item
Use @name{comint}'s input history to recall commands. This is a big
improvement over Unidata's commmand history mechanism.

@item
Keep a record of your entire session history in an Emacs buffer.  You
can review, search, edit, and run most other commands available in
Emacs.

@item Compile, catalog and run unibasic subroutines, functions and
programs from 
@end itemize


It is finished enough that I use it for day to day work but the
installation and setup is very immature, and there are probably many
setups which it does not yet handle.

@value{u2-mode} is still under active development and any problems you encounter,
trivial or major, should be reported to the @value{u2-mode} developers.
@xref{Bug Reports}.


@subsubheading Behind the scenes
@cindex behind the scenes
@cindex details of operation
@cindex how it works

This section tries to explain what goes on behind the scenes when you
access UniBasic through @value{u2-mode}.

@itemize
@item
When you run @samp{unidata}, it asks for the name of the account to
which to connect.  The account must be a directory name, but it can
accept a remote directory specification, just as tramp accepts. If the
directory is local, it opens a shell, runs the unidata command as in the
@var{unidata-udt-command}. (Note: there is a variable
@var{unidata-application-path}, but it is not used.  It should be, and
will be in the future, so @var{unidata-udt-command} will not need the
entire path.)  If the account path is remote, it extracts the host name
from the path, connects to the host, and runs the
@var{unidata-udt-command} on the remote host, and opens a buffer in a
mode derived from @{comint-mode}.
@end itemize

@c For the end user
@node Obtaining U2-Mode
@chapter Obtaining U2-Mode.
@cindex obtaining U2-Mode

@value{u2-mode} is freely available on the Internet and the latest
release may be downloaded from
@uref{http://ftp.gnu.org/gnu/u2-mode/}.

@node History
@chapter History of @value{u2-mode}
@cindex history
@cindex development history

@c History?

@include u2-modeinst.texi

@node Configuration
@chapter Configuring @value{u2-mode} for use
@cindex configuration

@cindex default configuration
@value{u2-mode} is (normally) fully functional when it is initially installed.
It is initially configured to use the @command{ssh} program to connect
to the remote host and to use base64 or uu encoding to transfer the
files through that shell connection.  So in the easiest case, you just
type @kbd{C-x C-f} and then enter the filename
@file{@value{prefix}@var{user}@@@var{machine}@value{postfix}@var{/path/to.file}}.

On some hosts, there are problems with opening a connection.  These are
related to the behavior of the remote shell.  See @xref{Remote shell
setup}, for details on this.

If you do not wish to use these commands to connect to the remote
host, you should change the default connection and transfer method
that @value{u2-mode} uses.  There are several different methods that @value{u2-mode}
can use to connect to remote machines and transfer files
(@pxref{Connection types}).

If you don't know which method is right for you, see @xref{Default
Method}.


@menu
* Connection types::            Types of connections made to remote machines.
* Default Method::              Selecting a default method.
                                  Here we also try to help those who
                                  don't have the foggiest which method
                                  is right for them.
* Default User::                Selecting a default user.
* Default Host::                Selecting a default host.
* Multi-hops::                  Connecting to a remote host using multiple hops.
* Customizing Methods::         Using Non-Standard Methods.
* Customizing Completion::      Selecting config files for user/host name completion.
* Password caching::            Reusing passwords for several connections.
* Remote Programs::             How @value{u2-mode} finds and uses programs on the remote machine.
* Remote shell setup::          Remote shell setup hints.
* Windows setup hints::         Issues with Cygwin ssh.
* Auto-save and Backup::        Auto-save and Backup.
@end menu


@node Connection types
@section Types of connections made to remote machines.
@cindex connection types, overview

U2-mode now only knows how to connect to the host using telnet.  It can
connect to a telnet server, and start unidata from the shell command
line, or connect into a session which goes directly into a U2 session
(as, for example, if the server is a Windows box running the U2 telnet
server.) 

Eventually, I hope to recognize all of the methods honored by Tramp:

@cindex inline methods
@cindex external transfer methods
@cindex external methods
@cindex out-of-band methods
@cindex methods, inline
@cindex methods, external transfer
@cindex methods, out-of-band

@ignore
Loading or saving a remote file requires that the content of the file
be transfered between the two machines. The content of the file can be
transfered over the same connection used to log in to the remote
machine or the file can be transfered through another connection using
a remote copy program such as @command{rcp}, @command{scp} or
@command{rsync}.  The former are called @dfn{inline methods}, the
latter are called @dfn{out-of-band methods} or @dfn{external transfer
methods} (@dfn{external methods} for short).

The performance of the external transfer methods is generally better
than that of the inline methods, at least for large files.  This is
caused by the need to encode and decode the data when transferring
inline.

The one exception to this rule are the @command{scp} based transfer
methods.  While these methods do see better performance when actually
transferring files, the overhead of the cryptographic negotiation at
startup may drown out the improvement in file transfer times.

External transfer methods should be configured such a way that they
don't require a password (with @command{ssh-agent}, or such alike).
If it isn't possible, you should consider @ref{Password caching},
otherwise you will be prompted for a password every copy action.
@end ignore

@cindex uuencode
@cindex mimencode
@cindex base-64 encoding
@value{u2-mode} checks the availability and usability of commands like
@command{mimencode} (part of the @command{metamail} package) or
@command{uuencode} on the remote host.  The first reliable command
will be used.  The search path can be customized, see @ref{Remote
Programs}.

If both commands aren't available on the remote host, @value{u2-mode}
transfers a small piece of Perl code to the remote host, and tries to
apply it for encoding and decoding.


@table @asis
@item @option{rsh}
@cindex method rsh
@cindex rsh method

Connect to the remote host with @command{rsh}.  Due to the unsecure
connection it is recommended for very local host topology only.

@ignore
@item @option{ssh}
@cindex method ssh
@cindex ssh method

Connect to the remote host with @command{ssh}.  This is identical to
the previous option except that the @command{ssh} package is used,
making the connection more secure.

There are also two variants, @option{ssh1} and @option{ssh2}, that
call @samp{ssh -1} and @samp{ssh -2}, respectively.  This way, you can
explicitly select whether you want to use the SSH protocol version 1
or 2 to connect to the remote host.  (You can also specify in
@file{~/.ssh/config}, the SSH configuration file, which protocol
should be used, and use the regular @option{ssh} method.)

Two other variants, @option{ssh1_old} and @option{ssh2_old}, use the
@command{ssh1} and @command{ssh2} commands explicitly.  If you don't
know what these are, you do not need these options.

All the methods based on @command{ssh} have an additional kludgy
feature: you can specify a host name which looks like @file{host#42}
(the real host name, then a hash sign, then a port number).  This
means to connect to the given host but to also pass @code{-p 42} as
arguments to the @command{ssh} command.

@end ignore

@ignore
@item @option{telnet}
@cindex method telnet
@cindex telnet method

Connect to the remote host with @command{telnet}.  This is as unsecure
as the @option{rsh} method.
@end ignore

@ignore
@item @option{su}
@cindex method su
@cindex su method

This method does not connect to a remote host at all, rather it uses
the @command{su} program to allow you to edit files as another user.
With other words, a specified host name in the file name is silently
ignored.
@end ignore

@item @option{sudo}
@cindex method sudo
@cindex sudo method

This is similar to the @option{su} method, but it uses @command{sudo}
rather than @command{su} to become a different user.

Note that @command{sudo} must be configured to allow you to start a
shell as the user. 

@item @option{sshx}
@cindex method sshx
@cindex sshx method

As you would expect, this is similar to @option{ssh}, only a little
different.  Whereas @option{ssh} opens a normal interactive shell on
the remote host, this option uses @samp{ssh -t -t @var{host} -l
@var{user} /bin/sh} to open a connection.  This is useful for users
where the normal login shell is set up to ask them a number of
questions when logging in.  This procedure avoids these questions, and
just gives @value{u2-mode} a more-or-less `standard' login shell to work
with.

Note that this procedure does not eliminate questions asked by
@command{ssh} itself.  For example, @command{ssh} might ask ``Are you
sure you want to continue connecting?'' if the host key of the remote
host is not known.  @value{u2-mode} does not know how to deal with such a
question (yet), therefore you will need to make sure that you can log
in without such questions.

This is also useful for Windows users where @command{ssh}, when
invoked from an @value{emacsname} buffer, tells them that it is not
allocating a pseudo tty.  When this happens, the login shell is wont
to not print any shell prompt, which confuses @value{u2-mode} mightily.
For reasons unknown, some Windows ports for @command{ssh} require the
doubled @samp{-t} option.

This supports the @samp{-p} kludge.

@ignore
@item @option{krlogin}
@cindex method krlogin
@cindex krlogin method
@cindex Kerberos (with krlogin method)

This method is also similar to @option{ssh}.  It only uses the
@command{krlogin -x} command to log in to the remote host.
@end ignore

@ignore
@item @option{plink}
@cindex method plink
@cindex plink method

This method is mostly interesting for Windows users using the PuTTY
implementation of SSH.  It uses @samp{plink -ssh} to log in to the
remote host.

This supports the @samp{-P} kludge.

Additionally, the methods @option{plink1} and @option{plink2} are
provided, which call @samp{plink -1 -ssh} or @samp{plink -2 -ssh} in
order to use SSH protocol version 1 or 2 explicitely.

CCC: Do we have to connect to the remote host once from the command
line to accept the SSH key?  Maybe this can be made automatic?

CCC: Say something about the first shell command failing.  This might
be due to a wrong setting of @code{u2-mode-rsh-end-of-line}.
@end ignore 

@end table


@node External transfer methods
@section External transfer methods
@cindex methods, external transfer
@cindex methods, out-of-band
@cindex external transfer methods
@cindex out-of-band methods

The external transfer methods operate through multiple channels, using
the remote shell connection for many actions while delegating file
transfers to an external transfer utility.

This saves the overhead of encoding and decoding that multiplexing the
transfer through the one connection has with the inline methods.

If you want to use an external transfer method you should be able to
execute the transfer utility to copy files to and from the remote
machine without any interaction.

The method of transfer is not important to U2-mode, since it does not
itself transfer files, but I plan to recognize all of tramps connection
types and use the appropriate command to create the shell connection to
the server.

@cindex ssh-agent
This means that you will need to use @command{ssh-agent} if you use the
@command{scp} program for transfers, or maybe your version of
@command{scp} accepts a password on the command line.@footnote{PuTTY's
@command{pscp} allows you to specify the password on the command line.}
If you use @command{rsync} via @command{ssh} then the same rule must
apply to that connection.

If you cannot get an external method to run without asking for a
password you should consider @ref{Password caching}.

@ignore
@table @asis
@item @option{rcp}  ---  @command{rsh} and @command{rcp}
@cindex method rcp
@cindex rcp method
@cindex rcp (with rcp method)
@cindex rsh (with rcp method)


@item @option{scp}  ---  @command{ssh} and @command{scp}
@cindex method scp
@cindex scp method
@cindex scp (with scp method)
@cindex ssh (with scp method)

@item @option{sftp}  ---  @command{ssh} and @command{sftp}
@cindex method sftp
@cindex sftp method
@cindex sftp (with sftp method)
@cindex ssh (with sftp method)

@item @option{rsync}  ---  @command{ssh} and @command{rsync}
@cindex method rsync
@cindex rsync method
@cindex rsync (with rsync method)
@cindex ssh (with rsync method)

@item @option{scpx} --- @command{ssh} and @command{scp}
@cindex method scpx
@cindex scpx method
@cindex scp (with scpx method)
@cindex ssh (with scpx method)

@item @option{pscp} --- @command{plink} and @command{pscp}
@cindex method pscp
@cindex pscp method
@cindex pscp (with pscp method)
@cindex plink (with pscp method)
@cindex PuTTY (with pscp method)


@item @option{psftp} --- @command{plink} and @command{psftp}
@cindex method psftp
@cindex psftp method
@cindex psftp (with psftp method)
@cindex plink (with psftp method)
@cindex PuTTY (with psftp method)


@item @option{fcp} --- @command{fsh} and @command{fcp}
@cindex method fcp
@cindex fcp method
@cindex fsh (with fcp method)
@cindex fcp (with fcp method)

This method is similar to @option{scp}, but it uses the @command{fsh}
command to connect to the remote host.  @command{fsh/fcp} are a front-end for
@command{ssh} which allow for reusing the same @command{ssh} session
for submitting several commands.  This avoids the startup overhead of
@command{scp} (which has to establish a secure connection whenever it
is called).  Note, however, that you can also use one of the inline
methods to achieve a similar effect.

This method uses the command @samp{fsh @var{host} -l @var{user}
/bin/sh -i} to establish the connection, it does not work to just say
@command{fsh @var{host} -l @var{user}}.

@cindex method fsh
@cindex fsh method


@end table

@end ignore


@node Default Method
@section Selecting a default method
@cindex default method

@ignore
@vindex u2-mode-default-method
When you select an appropriate connection method for your typical usage
you should set the variable @code{u2-mode-default-method} to reflect that
choice.  This variable controls which method will be used when a method
is not specified in the @value{u2-mode} file name.  For example:

@lisp
(setq u2-mode-default-method "scp")
@end lisp

@vindex u2-mode-default-method-alist
You can also specify different methods for certain user/host
combinations, via the variable @code{u2-mode-default-method-alist}.  For
example, the following two lines specify to use the @option{ssh}
method for all user names matching @samp{john} and the @option{rsync}
method for all host names matching @samp{lily}.  The third line
specifies to use the @option{su} method for the user @samp{root} on
the machine @samp{localhost}.

@lisp
(add-to-list 'u2-mode-default-method-alist '("" "john" "ssh"))
(add-to-list 'u2-mode-default-method-alist '("lily" "" "rsync"))
(add-to-list 'u2-mode-default-method-alist
             '("\\`localhost\\'" "\\`root\\'" "su"))
@end lisp

@noindent
See the documentation for the variable
@code{u2-mode-default-method-alist} for more details.

External transfer methods are normally preferable to inline transfer
methods, giving better performance.
@end ignore

@xref{Inline methods}.
@xref{External transfer methods}.

Another consideration with the selection of connection methods is the
environment you will use them in and, especially when used over the
Internet, the security implications of your preferred method.

The @option{rsh} and @option{telnet} methods send your password as
plain text as you log in to the remote machine, as well as
transferring the files in such a way that the content can easily be
read from other machines.

If you need to connect to remote systems that are accessible from the
Internet, you should give serious thought to using @option{ssh} based
methods to connect. These provide a much higher level of security,
making it a non-trivial exercise for someone to obtain your password
or read the content of the files you are editing.


@ignore
@node Default User
@section Selecting a default user
@cindex default user

@vindex u2-mode-default-user
The user part of a @value{u2-mode} file name can be omitted.  Usually,
it is replaced by the user name you are logged in.  Often, this is not
what you want.  A typical use of @value{u2-mode} might be to edit some
files with root permissions on the local host.  This case, you should
set the variable @code{u2-mode-default-user} to reflect that choice.
For example:

@lisp
(setq u2-mode-default-user "root")
@end lisp

@vindex u2-mode-default-user-alist
You can also specify different users for certain method/host
combinations, via the variable @code{u2-mode-default-user-alist}.  For
example, if you always have to use the user @samp{john} in the domain
@samp{somewhere.else}, you can specify the following:

@lisp
(add-to-list 'u2-mode-default-user-alist
             '("ssh" ".*\\.somewhere\\.else\\'" "john"))
@end lisp

@noindent
See the documentation for the variable
@code{u2-mode-default-user-alist} for more details.

One trap to fall in must be known.  If @value{u2-mode} finds a default
user, this user will be passed always to the connection command as
parameter (for example @samp{ssh here.somewhere.else -l john}.  If you
have specified another user for your command in its configuration
files, @value{u2-mode} cannot know it, and the remote access will fail.
If you have specified in the given example in @file{~/.ssh/config} the
lines

@example
Host here.somewhere.else
     User lily
@end example

@noindent
than you must discard selecting a default user by @value{u2-mode}.  This
will be done by setting it to @code{nil} (or @samp{lily}, likewise):

@lisp
(add-to-list 'u2-mode-default-user-alist
             '("ssh" "\\`here\\.somewhere\\.else\\'" nil))
@end lisp
@end ignore

@ignore
@node Default Host
@section Selecting a default host
@cindex default host

@vindex u2-mode-default-host
Finally, it is even possible to omit the host name part of a
@value{u2-mode} file name.  This case, the value of the variable
@code{u2-mode-default-host} is used.  Per default, it is initialized
with the host name your local @value{emacsname} is running.

If you, for example, use @value{u2-mode} mainly to contact the host
@samp{target} as user @samp{john}, you can specify:

@lisp
(setq u2-mode-default-user "john"
      u2-mode-default-host "target")
@end lisp

Then the simple file name
@samp{@value{prefix}ssh@value{postfixhop}@value{postfix}} will connect
you to John's home directory on target.
@ifset emacs
Note, however, that the most simplification
@samp{@value{prefix}@value{postfixhop}@value{postfix}} won't work,
because @samp{/:} is the prefix for quoted file names.
@end ifset
@end ignore


@node Password caching
@section Reusing passwords for several connections.
@cindex passwords

U2-mode uses a password caching scheme similary to that used by tramp. 

@ignore
Sometimes it is necessary to connect to the same remote host several
times.  Reentering passwords again and again would be annoying, when
the choosen method does not support access without password prompt
throught own configuration.

By default, @value{u2-mode} caches the passwords entered by you.  They will
be reused next time if a connection needs them for the same user name
and host name, independant of the connection method.

@vindex password-cache-expiry
Passwords are not saved permanently, that means the password caching
is limited to the lifetime of your @value{emacsname} session.  You
can influence the lifetime of password caching by customizing the
variable @code{password-cache-expiry}.  The value is the number of
seconds how long passwords are cached.  Setting it to @code{nil}
disables the expiration.

@findex u2-mode-clear-passwd
A password is removed from the cache if a connection isn't established
successfully.  You can remove a password from the cache also by
executing @kbd{M-x u2-mode-clear-passwd} in a buffer containing a
related remote file or directory.

@vindex password-cache
If you don't like this feature for security reasons, password caching
can be disabled totally by customizing the variable
@code{password-cache} (setting it to @code{nil}).

Implementation Note: password caching is based on the package
password.el in No Gnus.  For the time being, it is activated only when
this package is seen in the @code{load-path} while loading @value{u2-mode}.
@ifset installchapter
If you don't use No Gnus, you can take password.el from the @value{u2-mode}
@file{contrib} directory, see @ref{Installation parameters}.
@end ifset
It will be activated mandatory once No Gnus has found its way into
@value{emacsname}.
@end ignore

@node Remote shell setup
@comment  node-name,  next,  previous,  up
@section Remote shell setup hints
@cindex remote shell setup
@cindex @file{.profile} file
@cindex @file{.login} file
@cindex shell init files

@ignore
As explained in the @ref{Overview} section, @value{u2-mode} connects to the
remote host and talks to the shell it finds there.  Of course, when you
log in, the shell executes its init files.  Suppose your init file
requires you to enter the birth date of your mother; clearly @value{u2-mode}
does not know this and hence fails to log you in to that host.

There are different possible strategies for pursuing this problem.  One
strategy is to enable @value{u2-mode} to deal with all possible situations.
This is a losing battle, since it is not possible to deal with
@emph{all} situations.  The other strategy is to require you to set up
the remote host such that it behaves like @value{u2-mode} expects.  This might
be inconvenient because you have to invest a lot of effort into shell
setup before you can begin to use @value{u2-mode}.

The package, therefore, pursues a combined approach.  It tries to
figure out some of the more common setups, and only requires you to
avoid really exotic stuff.  For example, it looks through a list of
directories to find some programs on the remote host.  And also, it
knows that it is not obvious how to check whether a file exists, and
therefore it tries different possibilities.  (On some hosts and
shells, the command @command{test -e} does the trick, on some hosts
the shell builtin doesn't work but the program @command{/usr/bin/test
-e} or @command{/bin/test -e} works.  And on still other hosts,
@command{ls -d} is the right way to do this.)

Below you find a discussion of a few things that @value{u2-mode} does not deal
with, and that you therefore have to set up correctly.

@table @asis
@item @var{shell-prompt-pattern}
@vindex shell-prompt-pattern

After logging in to the remote host, @value{u2-mode} has to wait for the remote
shell startup to finish before it can send commands to the remote
shell.  The strategy here is to wait for the shell prompt.  In order to
recognize the shell prompt, the variable @code{shell-prompt-pattern} has
to be set correctly to recognize the shell prompt on the remote host.

Note that @value{u2-mode} requires the match for @code{shell-prompt-pattern}
to be at the end of the buffer.  Many people have something like the
following as the value for the variable: @code{"^[^>$][>$] *"}.  Now
suppose your shell prompt is @code{a <b> c $ }.  In this case,
@value{u2-mode} recognizes the @code{>} character as the end of the prompt,
but it is not at the end of the buffer.

@item @var{u2-mode-shell-prompt-pattern}
@vindex u2-mode-shell-prompt-pattern

This regular expression is used by @value{u2-mode} in the same way as
@code{shell-prompt-pattern}, to match prompts from the remote shell.
This second variable exists because the prompt from the remote shell
might be different from the prompt from a local shell --- after all,
the whole point of @value{u2-mode} is to log in to remote hosts as a
different user.  The default value of
@code{u2-mode-shell-prompt-pattern} is the same as the default value of
@code{shell-prompt-pattern}, which is reported to work well in many
circumstances.

@item @command{tset} and other questions
@cindex Unix command tset
@cindex tset Unix command

Some people invoke the @command{tset} program from their shell startup
scripts which asks the user about the terminal type of the shell.
Maybe some shells ask other questions when they are started.
@value{u2-mode} does not know how to answer these questions.  There are
two approaches for dealing with this problem.  One approach is to take
care that the shell does not ask any questions when invoked from
@value{u2-mode}.  You can do this by checking the @code{TERM}
environment variable, it will be set to @code{dumb} when connecting.

@vindex u2-mode-terminal-type
The variable @code{u2-mode-terminal-type} can be used to change this value
to @code{dumb}.

The other approach is to teach @value{u2-mode} about these questions.  See
the variable @code{u2-mode-actions-before-shell}.


@item Environment variables named like users in @file{.profile}

If you have a user named frumple and set the variable @code{FRUMPLE} in
your shell environment, then this might cause trouble.  Maybe rename
the variable to @code{FRUMPLE_DIR} or the like.

This weird effect was actually reported by a @value{u2-mode} user!


@item Non-Bourne commands in @file{.profile}

After logging in to the remote host, @value{u2-mode} issues the command
@command{exec /bin/sh}.  (Actually, the command is slightly
different.)  When @command{/bin/sh} is executed, it reads some init
files, such as @file{~/.shrc} or @file{~/.profile}.

Now, some people have a login shell which is not @code{/bin/sh} but a
Bourne-ish shell such as bash or ksh.  Some of these people might put
their shell setup into the files @file{~/.shrc} or @file{~/.profile}.
This way, it is possible for non-Bourne constructs to end up in those
files.  Then, @command{exec /bin/sh} might cause the Bourne shell to
barf on those constructs.

As an example, imagine somebody putting @command{export FOO=bar} into
the file @file{~/.profile}.  The standard Bourne shell does not
understand this syntax and will emit a syntax error when it reaches
this line.

Another example is the tilde (@code{~}) character, say when adding
@file{~/bin} to @code{$PATH}.  Many Bourne shells will not expand this
character, and since there is usually no directory whose name consists
of the single character tilde, strange things will happen.

What can you do about this?

Well, one possibility is to make sure that everything in
@file{~/.shrc} and @file{~/.profile} on all remote hosts is
Bourne-compatible.  In the above example, instead of @command{export
FOO=bar}, you might use @command{FOO=bar; export FOO} instead.

The other possibility is to put your non-Bourne shell setup into some
other files.  For example, bash reads the file @file{~/.bash_profile}
instead of @file{~/.profile}, if the former exists.  So bash
aficionados just rename their @file{~/.profile} to
@file{~/.bash_profile} on all remote hosts, and Bob's your uncle.

The @value{u2-mode} developers would like to circumvent this problem, so
if you have an idea about it, please tell us.  However, we are afraid
it is not that simple: before saying @command{exec /bin/sh},
@value{u2-mode} does not know which kind of shell it might be talking
to.  It could be a Bourne-ish shell like ksh or bash, or it could be a
csh derivative like tcsh, or it could be zsh, or even rc.  If the
shell is Bourne-ish already, then it might be prudent to omit the
@command{exec /bin/sh} step.  But how to find out if the shell is
Bourne-ish?

@end table
@end ignore

@ignore
@node Windows setup hints
@section Issues with Cygwin ssh
@cindex Cygwin, issues

This section needs a lot of work!  Please help.

@cindex method sshx with Cygwin
@cindex sshx method with Cygwin
The recent Cygwin installation of @command{ssh} works only with a
Cygwinized @value{emacsname}.  You can check it by typing @kbd{M-x
eshell}, and starting @kbd{ssh test.machine}.  The problem is evident
if you see a message like this:

@example
Pseudo-terminal will not be allocated because stdin is not a terminal.
@end example

Older @command{ssh} versions of Cygwin are told to cooperate with
@value{u2-mode} selecting @option{sshx} as the connection method.  You
can find information about setting up Cygwin in their FAQ at
@uref{http://cygwin.com/faq/}.

@cindex method scpx with Cygwin
@cindex scpx method with Cygwin
If you wish to use the @option{scpx} connection method, then you might
have the problem that @value{emacsname} calls @command{scp} with a
Windows filename such as @code{c:/foo}.  The Cygwin version of
@command{scp} does not know about Windows filenames and interprets
this as a remote filename on the host @code{c}.

One possible workaround is to write a wrapper script for @option{scp}
which converts the Windows filename to a Cygwinized filename.

@cindex Cygwin and ssh-agent
@cindex SSH_AUTH_SOCK and @value{emacsname} on Windows
If you want to use either @option{ssh} based method on Windows, then
you might encounter problems with @command{ssh-agent}.  Using this
program, you can avoid typing the pass-phrase every time you log in.
However, if you start @value{emacsname} from a desktop shortcut, then
the environment variable @code{SSH_AUTH_SOCK} is not set and so
@value{emacsname} and thus @value{u2-mode} and thus @command{ssh} and
@command{scp} started from @value{u2-mode} cannot communicate with
@command{ssh-agent}.  It works better to start @value{emacsname} from
the shell.

If anyone knows how to start @command{ssh-agent} under Windows in such a
way that desktop shortcuts can profit, please holler.  I don't really
know anything at all about Windows@dots{}
@end ignore

@node Usage
@chapter Using @value{u2-mode}
@cindex using @value{u2-mode}


@menu
* Filename Syntax::             @value{u2-mode} filename conventions.
* Compilation::                 Compile remote files.
@end menu


@node Filename Syntax
@section @value{u2-mode} filename conventions
@cindex filename syntax
@cindex filename examples

To access the file @var{localname} on the remote machine @var{machine} you
would specify the filename
@file{@value{prefix}@var{machine}@value{postfix}@var{localname}}.
This will connect to @var{machine} and transfer the file using the
default method.  @xref{Default Method}.

Some examples of @value{u2-mode} filenames are shown below.

@table @file
@item @value{prefix}melancholia@value{postfix}.emacs
Edit the file @file{.emacs} in your home directory on the machine
@code{melancholia}.

@item @value{prefix}melancholia.danann.net@value{postfix}.emacs
This edits the same file, using the fully qualified domain name of
the machine.

@item @value{prefix}melancholia@value{postfix}~/.emacs
This also edits the same file --- the @file{~} is expanded to your
home directory on the remote machine, just like it is locally.

@item @value{prefix}melancholia@value{postfix}~daniel/.emacs
This edits the file @file{.emacs} in the home directory of the user
@code{daniel} on the machine @code{melancholia}. The @file{~<user>}
construct is expanded to the home directory of that user on the remote
machine.

@item @value{prefix}melancholia@value{postfix}/etc/squid.conf
This edits the file @file{/etc/squid.conf} on the machine
@code{melancholia}.

@end table

Unless you specify a different name to use, @value{u2-mode} will use the
current local user name as the remote user name to log in with. If you
need to log in as a different user, you can specify the user name as
part of the filename.

To log in to the remote machine as a specific user, you use the syntax
@file{@value{prefix}@var{user}@@@var{machine}@value{postfix}/@var{path/to.file}}.
That means that connecting to @code{melancholia} as @code{daniel} and
editing @file{.emacs} in your home directory you would specify
@file{@value{prefix}daniel@@melancholia@value{postfix}.emacs}.

It is also possible to specify other file transfer methods
(@pxref{Default Method}) as part of the filename.
@ifset emacs
This is done by putting the method before the user and host name, as
in
@file{@value{prefix}@var{method}@value{postfixhop}}
(Note the trailing colon).
@end ifset
@ifset xemacs
This is done by replacing the initial
@file{@value{prefix}} with
@file{@value{prefix}<method>@value{postfixhop}}.
(Note the trailing slash!).
@end ifset
The user, machine and file specification remain the same.

So, to connect to the machine @code{melancholia} as @code{daniel},
using the @option{ssh} method to transfer files, and edit @file{.emacs}
in my home directory I would specify the filename
@file{@value{prefix}ssh@value{postfixhop}daniel@@melancholia@value{postfix}.emacs}.


@node Compilation
@section Compile remote files
@cindex compile
@cindex recompile


@node Bug Reports
@chapter Reporting Bugs and Problems
@cindex bug reports

Bugs and problems with @value{u2-mode} are actively worked on by the
development team (me :-). Feature requests and suggestions are also more
than welcome.

The @value{u2-mode} mailing list is a great place to get information on
working with @value{u2-mode}, solving problems and general discussion
and advice on topics relating to the package.

@ignore
The mailing list is at @email{u2-mode-devel@@gnu.org}.  Messages sent to
this address go to all the subscribers. This is @emph{not} the address
to send subscription requests to.

Subscribing to the list is performed via
@uref{http://lists.gnu.org/mailman/listinfo/u2-mode-devel/,
the @value{u2-mode} Mail Subscription Page}.

To report a bug in @value{u2-mode}, you should execute @kbd{M-x
u2-mode-bug}. This will automatically generate a buffer with the details
of your system and @value{u2-mode} version.
@end ignore

When submitting a bug report, please try to describe in excruciating
detail the steps required to reproduce the problem, the setup of the
remote machine and any special conditions that exist.

If you can identify a minimal test case that reproduces the problem,
include that with your bug report.  This will make it much easier for
the development team to analyze and correct the problem.

Please be aware that, with a verbosity level of 9 or greater, the
contents of files and directories will be included in the debug
buffer.


@node Frequently Asked Questions
@chapter Frequently Asked Questions
@cindex frequently asked questions
@cindex FAQ

@itemize @bullet
@ignore
@item
Where can I get the latest @value{u2-mode}?

@value{u2-mode} is available under the URL below.

@noindent
@uref{http://ftp.gnu.org/gnu/u2-mode/}

@noindent
There is also a Savannah project page.

@noindent
@uref{http://savannah.gnu.org/projects/u2-mode/}
@end ignore

@item
Which systems does it work on?

The package has been used successfully on GNU Emacs 21 @c, GNU Emacs 22
@c and XEmacs 21 (starting with 21.4)
.

The package was intended to work on Unix, and it really expects a
Unix-like system on the remote end.

@end itemize


@node Issues
@chapter Debatable Issues and What Was Decided

@node Concept Index
@comment node-name,    next,  previous,      up
@unnumbered Concept Index
@printindex cp
@contents
@c End of u2-mode.texi - the U2-MODE User Manual
@bye
